// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: camera_server/camera_server.proto
#ifndef GRPC_camera_5fserver_2fcamera_5fserver_2eproto__INCLUDED
#define GRPC_camera_5fserver_2fcamera_5fserver_2eproto__INCLUDED

#include "camera_server/camera_server.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace camera_server {

// Provides handling of camera trigger commands.
class CameraServerService final {
public:
    static constexpr char const* service_full_name()
    {
        return "mavsdk.rpc.camera_server.CameraServerService";
    }
    class StubInterface {
    public:
        virtual ~StubInterface() {}
        // Sets the camera information. This must be called as soon as the camera server is created.
        virtual ::grpc::Status SetInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInformationRequest& request,
            ::mavsdk::rpc::camera_server::SetInformationResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetInformationResponse>>
        AsyncSetInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInformationRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::SetInformationResponse>>(
                AsyncSetInformationRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetInformationResponse>>
        PrepareAsyncSetInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInformationRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::SetInformationResponse>>(
                PrepareAsyncSetInformationRaw(context, request, cq));
        }
        // Sets video stream info.
        virtual ::grpc::Status SetVideoStreamInfo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest& request,
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>>
        AsyncSetVideoStreamInfo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>>(
                AsyncSetVideoStreamInfoRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>>
        PrepareAsyncSetVideoStreamInfo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>>(
                PrepareAsyncSetVideoStreamInfoRaw(context, request, cq));
        }
        // Sets image capture in progress status flags. This should be set to true when the camera
        // is busy taking a photo and false when it is done.
        virtual ::grpc::Status SetInProgress(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest& request,
            ::mavsdk::rpc::camera_server::SetInProgressResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetInProgressResponse>>
        AsyncSetInProgress(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::SetInProgressResponse>>(
                AsyncSetInProgressRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetInProgressResponse>>
        PrepareAsyncSetInProgress(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::SetInProgressResponse>>(
                PrepareAsyncSetInProgressRaw(context, request, cq));
        }
        // Subscribe to image capture requests. Each request received should respond to using
        // RespondTakePhoto.
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::TakePhotoResponse>>
        SubscribeTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::TakePhotoResponse>>(
                SubscribeTakePhotoRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::TakePhotoResponse>>
        AsyncSubscribeTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::TakePhotoResponse>>(
                AsyncSubscribeTakePhotoRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::TakePhotoResponse>>
        PrepareAsyncSubscribeTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::TakePhotoResponse>>(
                PrepareAsyncSubscribeTakePhotoRaw(context, request, cq));
        }
        // Respond to an image capture request from SubscribeTakePhoto.
        virtual ::grpc::Status RespondTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest& request,
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>>
        AsyncRespondTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>>(
                AsyncRespondTakePhotoRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>>
        PrepareAsyncRespondTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>>(
                PrepareAsyncRespondTakePhotoRaw(context, request, cq));
        }
        // Subscribe to start video requests. Each request received should respond to using
        // RespondStartVideo
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::StartVideoResponse>>
        SubscribeStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::StartVideoResponse>>(
                SubscribeStartVideoRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::StartVideoResponse>>
        AsyncSubscribeStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::StartVideoResponse>>(
                AsyncSubscribeStartVideoRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::StartVideoResponse>>
        PrepareAsyncSubscribeStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::StartVideoResponse>>(
                PrepareAsyncSubscribeStartVideoRaw(context, request, cq));
        }
        // Subscribe to stop video requests. Each request received should respond using
        // StopVideoResponse
        virtual ::grpc::Status RespondStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest& request,
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse>>
        AsyncRespondStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse>>(
                AsyncRespondStartVideoRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse>>
        PrepareAsyncRespondStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse>>(
                PrepareAsyncRespondStartVideoRaw(context, request, cq));
        }
        // Subscribe to stop video requests. Each request received should response to using
        // RespondStopVideo
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::StopVideoResponse>>
        SubscribeStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::StopVideoResponse>>(
                SubscribeStopVideoRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::StopVideoResponse>>
        AsyncSubscribeStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::StopVideoResponse>>(
                AsyncSubscribeStopVideoRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::StopVideoResponse>>
        PrepareAsyncSubscribeStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::StopVideoResponse>>(
                PrepareAsyncSubscribeStopVideoRaw(context, request, cq));
        }
        // Respond to stop video request from SubscribeStopVideo.
        virtual ::grpc::Status RespondStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest& request,
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse>>
        AsyncRespondStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse>>(
                AsyncRespondStopVideoRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse>>
        PrepareAsyncRespondStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse>>(
                PrepareAsyncRespondStopVideoRaw(context, request, cq));
        }
        // Subscribe to start video streaming requests. Each request received should response to
        // using RespondStartVideoStreaming
        std::unique_ptr<::grpc::ClientReaderInterface<
            ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>
        SubscribeStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request)
        {
            return std::unique_ptr<::grpc::ClientReaderInterface<
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>(
                SubscribeStartVideoStreamingRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>
        AsyncSubscribeStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>(
                AsyncSubscribeStartVideoStreamingRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>
        PrepareAsyncSubscribeStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>(
                PrepareAsyncSubscribeStartVideoStreamingRaw(context, request, cq));
        }
        // Respond to start video streaming from SubscribeStartVideoStreaming.
        virtual ::grpc::Status RespondStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest& request,
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>>
        AsyncRespondStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>>(
                AsyncRespondStartVideoStreamingRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>>
        PrepareAsyncRespondStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>>(
                PrepareAsyncRespondStartVideoStreamingRaw(context, request, cq));
        }
        // Subscribe to stop video streaming requests. Each request received should response to
        // using RespondStopVideoStreaming
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>
        SubscribeStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request)
        {
            return std::unique_ptr<::grpc::ClientReaderInterface<
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>(
                SubscribeStopVideoStreamingRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>
        AsyncSubscribeStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>(
                AsyncSubscribeStopVideoStreamingRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>
        PrepareAsyncSubscribeStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>(
                PrepareAsyncSubscribeStopVideoStreamingRaw(context, request, cq));
        }
        // Respond to stop video streaming from SubscribeStopVideoStreaming.
        virtual ::grpc::Status RespondStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest& request,
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>>
        AsyncRespondStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>>(
                AsyncRespondStopVideoStreamingRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>>
        PrepareAsyncRespondStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>>(
                PrepareAsyncRespondStopVideoStreamingRaw(context, request, cq));
        }
        // Subscribe to set camera mode requests. Each request received should response to using
        // RespondSetMode
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::SetModeResponse>>
        SubscribeSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::SetModeResponse>>(
                SubscribeSetModeRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SetModeResponse>>
        AsyncSubscribeSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SetModeResponse>>(
                AsyncSubscribeSetModeRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SetModeResponse>>
        PrepareAsyncSubscribeSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SetModeResponse>>(
                PrepareAsyncSubscribeSetModeRaw(context, request, cq));
        }
        // Respond to set camera mode from SubscribeSetMode.
        virtual ::grpc::Status RespondSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest& request,
            ::mavsdk::rpc::camera_server::RespondSetModeResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSetModeResponse>>
        AsyncRespondSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondSetModeResponse>>(
                AsyncRespondSetModeRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSetModeResponse>>
        PrepareAsyncRespondSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondSetModeResponse>>(
                PrepareAsyncRespondSetModeRaw(context, request, cq));
        }
        // Subscribe to camera storage information requests. Each request received should response
        // to using RespondStorageInformation
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::StorageInformationResponse>>
        SubscribeStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request)
        {
            return std::unique_ptr<::grpc::ClientReaderInterface<
                ::mavsdk::rpc::camera_server::StorageInformationResponse>>(
                SubscribeStorageInformationRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StorageInformationResponse>>
        AsyncSubscribeStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::StorageInformationResponse>>(
                AsyncSubscribeStorageInformationRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StorageInformationResponse>>
        PrepareAsyncSubscribeStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::StorageInformationResponse>>(
                PrepareAsyncSubscribeStorageInformationRaw(context, request, cq));
        }
        // Respond to camera storage information from SubscribeStorageInformation.
        virtual ::grpc::Status RespondStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest& request,
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>>
        AsyncRespondStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>>(
                AsyncRespondStorageInformationRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>>
        PrepareAsyncRespondStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>>(
                PrepareAsyncRespondStorageInformationRaw(context, request, cq));
        }
        // Subscribe to camera capture status requests. Each request received should response to
        // using RespondCaptureStatus
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::CaptureStatusResponse>>
        SubscribeCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::CaptureStatusResponse>>(
                SubscribeCaptureStatusRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::CaptureStatusResponse>>
        AsyncSubscribeCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::CaptureStatusResponse>>(
                AsyncSubscribeCaptureStatusRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::CaptureStatusResponse>>
        PrepareAsyncSubscribeCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::CaptureStatusResponse>>(
                PrepareAsyncSubscribeCaptureStatusRaw(context, request, cq));
        }
        // Respond to camera capture status from SubscribeCaptureStatus.
        virtual ::grpc::Status RespondCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest& request,
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>>
        AsyncRespondCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>>(
                AsyncRespondCaptureStatusRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>>
        PrepareAsyncRespondCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>>(
                PrepareAsyncRespondCaptureStatusRaw(context, request, cq));
        }
        // Subscribe to format storage requests. Each request received should response to using
        // RespondFormatStorage
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::FormatStorageResponse>>
        SubscribeFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::FormatStorageResponse>>(
                SubscribeFormatStorageRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::FormatStorageResponse>>
        AsyncSubscribeFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::FormatStorageResponse>>(
                AsyncSubscribeFormatStorageRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::FormatStorageResponse>>
        PrepareAsyncSubscribeFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::FormatStorageResponse>>(
                PrepareAsyncSubscribeFormatStorageRaw(context, request, cq));
        }
        // Respond to format storage from SubscribeFormatStorage.
        virtual ::grpc::Status RespondFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest& request,
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>>
        AsyncRespondFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>>(
                AsyncRespondFormatStorageRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>>
        PrepareAsyncRespondFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>>(
                PrepareAsyncRespondFormatStorageRaw(context, request, cq));
        }
        // Subscribe to reset settings requests. Each request received should response to using
        // RespondResetSettings
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::ResetSettingsResponse>>
        SubscribeResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::ResetSettingsResponse>>(
                SubscribeResetSettingsRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::ResetSettingsResponse>>
        AsyncSubscribeResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::ResetSettingsResponse>>(
                AsyncSubscribeResetSettingsRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::ResetSettingsResponse>>
        PrepareAsyncSubscribeResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::ResetSettingsResponse>>(
                PrepareAsyncSubscribeResetSettingsRaw(context, request, cq));
        }
        // Respond to reset settings from SubscribeResetSettings.
        virtual ::grpc::Status RespondResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest& request,
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>>
        AsyncRespondResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>>(
                AsyncRespondResetSettingsRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>>
        PrepareAsyncRespondResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>>(
                PrepareAsyncRespondResetSettingsRaw(context, request, cq));
        }
        // Subscribe to camera settings requests. Each request received should response to using
        // RespondSettings.
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::SettingsResponse>>
        SubscribeSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::SettingsResponse>>(
                SubscribeSettingsRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SettingsResponse>>
        AsyncSubscribeSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SettingsResponse>>(
                AsyncSubscribeSettingsRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SettingsResponse>>
        PrepareAsyncSubscribeSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SettingsResponse>>(
                PrepareAsyncSubscribeSettingsRaw(context, request, cq));
        }
        // Respond to camera settings from SubscribeSettings.
        virtual ::grpc::Status RespondSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest& request,
            ::mavsdk::rpc::camera_server::RespondSettingsResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSettingsResponse>>
        AsyncRespondSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondSettingsResponse>>(
                AsyncRespondSettingsRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSettingsResponse>>
        PrepareAsyncRespondSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondSettingsResponse>>(
                PrepareAsyncRespondSettingsRaw(context, request, cq));
        }
        // Subscribe system time requests. Each request received should response to using
        // RespondSystemTime.
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::SystemTimeResponse>>
        SubscribeSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::SystemTimeResponse>>(
                SubscribeSystemTimeRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SystemTimeResponse>>
        AsyncSubscribeSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::SystemTimeResponse>>(
                AsyncSubscribeSystemTimeRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SystemTimeResponse>>
        PrepareAsyncSubscribeSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::SystemTimeResponse>>(
                PrepareAsyncSubscribeSystemTimeRaw(context, request, cq));
        }
        // Respond to system time from SubscribeSystemTime.
        virtual ::grpc::Status RespondSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest& request,
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>>
        AsyncRespondSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>>(
                AsyncRespondSystemTimeRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>>
        PrepareAsyncRespondSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>>(
                PrepareAsyncRespondSystemTimeRaw(context, request, cq));
        }
        // Subscribe to zoom range command
        std::unique_ptr<
            ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::ZoomRangeResponse>>
        SubscribeZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::ZoomRangeResponse>>(
                SubscribeZoomRangeRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::ZoomRangeResponse>>
        AsyncSubscribeZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::ZoomRangeResponse>>(
                AsyncSubscribeZoomRangeRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::ZoomRangeResponse>>
        PrepareAsyncSubscribeZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReaderInterface<
                ::mavsdk::rpc::camera_server::ZoomRangeResponse>>(
                PrepareAsyncSubscribeZoomRangeRaw(context, request, cq));
        }
        // Respond to zoom range.
        virtual ::grpc::Status RespondZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest& request,
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* response) = 0;
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>>
        AsyncRespondZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>>(
                AsyncRespondZoomRangeRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>>
        PrepareAsyncRespondZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>>(
                PrepareAsyncRespondZoomRangeRaw(context, request, cq));
        }
        class async_interface {
        public:
            virtual ~async_interface() {}
            // Sets the camera information. This must be called as soon as the camera server is
            // created.
            virtual void SetInformation(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetInformationRequest* request,
                ::mavsdk::rpc::camera_server::SetInformationResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void SetInformation(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetInformationRequest* request,
                ::mavsdk::rpc::camera_server::SetInformationResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Sets video stream info.
            virtual void SetVideoStreamInfo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* request,
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void SetVideoStreamInfo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* request,
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Sets image capture in progress status flags. This should be set to true when the
            // camera is busy taking a photo and false when it is done.
            virtual void SetInProgress(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetInProgressRequest* request,
                ::mavsdk::rpc::camera_server::SetInProgressResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void SetInProgress(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetInProgressRequest* request,
                ::mavsdk::rpc::camera_server::SetInProgressResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to image capture requests. Each request received should respond to using
            // RespondTakePhoto.
            virtual void SubscribeTakePhoto(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::TakePhotoResponse>*
                    reactor) = 0;
            // Respond to an image capture request from SubscribeTakePhoto.
            virtual void RespondTakePhoto(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* request,
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondTakePhoto(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* request,
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to start video requests. Each request received should respond to using
            // RespondStartVideo
            virtual void SubscribeStartVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::StartVideoResponse>*
                    reactor) = 0;
            // Subscribe to stop video requests. Each request received should respond using
            // StopVideoResponse
            virtual void RespondStartVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* request,
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondStartVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* request,
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to stop video requests. Each request received should response to using
            // RespondStopVideo
            virtual void SubscribeStopVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::StopVideoResponse>*
                    reactor) = 0;
            // Respond to stop video request from SubscribeStopVideo.
            virtual void RespondStopVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* request,
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondStopVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* request,
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to start video streaming requests. Each request received should response to
            // using RespondStartVideoStreaming
            virtual void SubscribeStartVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* request,
                ::grpc::ClientReadReactor<
                    ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>* reactor) = 0;
            // Respond to start video streaming from SubscribeStartVideoStreaming.
            virtual void RespondStartVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* request,
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondStartVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* request,
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to stop video streaming requests. Each request received should response to
            // using RespondStopVideoStreaming
            virtual void SubscribeStopVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>*
                    reactor) = 0;
            // Respond to stop video streaming from SubscribeStopVideoStreaming.
            virtual void RespondStopVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* request,
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondStopVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* request,
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to set camera mode requests. Each request received should response to using
            // RespondSetMode
            virtual void SubscribeSetMode(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::SetModeResponse>*
                    reactor) = 0;
            // Respond to set camera mode from SubscribeSetMode.
            virtual void RespondSetMode(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSetModeRequest* request,
                ::mavsdk::rpc::camera_server::RespondSetModeResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondSetMode(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSetModeRequest* request,
                ::mavsdk::rpc::camera_server::RespondSetModeResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to camera storage information requests. Each request received should
            // response to using RespondStorageInformation
            virtual void SubscribeStorageInformation(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::StorageInformationResponse>*
                    reactor) = 0;
            // Respond to camera storage information from SubscribeStorageInformation.
            virtual void RespondStorageInformation(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* request,
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondStorageInformation(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* request,
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to camera capture status requests. Each request received should response to
            // using RespondCaptureStatus
            virtual void SubscribeCaptureStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::CaptureStatusResponse>*
                    reactor) = 0;
            // Respond to camera capture status from SubscribeCaptureStatus.
            virtual void RespondCaptureStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* request,
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondCaptureStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* request,
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to format storage requests. Each request received should response to using
            // RespondFormatStorage
            virtual void SubscribeFormatStorage(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::FormatStorageResponse>*
                    reactor) = 0;
            // Respond to format storage from SubscribeFormatStorage.
            virtual void RespondFormatStorage(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* request,
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondFormatStorage(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* request,
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to reset settings requests. Each request received should response to using
            // RespondResetSettings
            virtual void SubscribeResetSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::ResetSettingsResponse>*
                    reactor) = 0;
            // Respond to reset settings from SubscribeResetSettings.
            virtual void RespondResetSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* request,
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondResetSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* request,
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to camera settings requests. Each request received should response to using
            // RespondSettings.
            virtual void SubscribeSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::SettingsResponse>*
                    reactor) = 0;
            // Respond to camera settings from SubscribeSettings.
            virtual void RespondSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSettingsRequest* request,
                ::mavsdk::rpc::camera_server::RespondSettingsResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSettingsRequest* request,
                ::mavsdk::rpc::camera_server::RespondSettingsResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe system time requests. Each request received should response to using
            // RespondSystemTime.
            virtual void SubscribeSystemTime(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::SystemTimeResponse>*
                    reactor) = 0;
            // Respond to system time from SubscribeSystemTime.
            virtual void RespondSystemTime(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* request,
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondSystemTime(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* request,
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
            // Subscribe to zoom range command
            virtual void SubscribeZoomRange(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::ZoomRangeResponse>*
                    reactor) = 0;
            // Respond to zoom range.
            virtual void RespondZoomRange(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* request,
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* response,
                std::function<void(::grpc::Status)>) = 0;
            virtual void RespondZoomRange(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* request,
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* response,
                ::grpc::ClientUnaryReactor* reactor) = 0;
        };
        typedef class async_interface experimental_async_interface;
        virtual class async_interface* async() { return nullptr; }
        class async_interface* experimental_async() { return async(); }

    private:
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetInformationResponse>*
        AsyncSetInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInformationRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetInformationResponse>*
        PrepareAsyncSetInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInformationRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>*
        AsyncSetVideoStreamInfoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>*
        PrepareAsyncSetVideoStreamInfoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetInProgressResponse>*
        AsyncSetInProgressRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::SetInProgressResponse>*
        PrepareAsyncSetInProgressRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::TakePhotoResponse>*
        SubscribeTakePhotoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::TakePhotoResponse>*
        AsyncSubscribeTakePhotoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::TakePhotoResponse>*
        PrepareAsyncSubscribeTakePhotoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>*
        AsyncRespondTakePhotoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>*
        PrepareAsyncRespondTakePhotoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::StartVideoResponse>*
        SubscribeStartVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StartVideoResponse>*
        AsyncSubscribeStartVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StartVideoResponse>*
        PrepareAsyncSubscribeStartVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse>*
        AsyncRespondStartVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse>*
        PrepareAsyncRespondStartVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::StopVideoResponse>*
        SubscribeStopVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::StopVideoResponse>*
        AsyncSubscribeStopVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::StopVideoResponse>*
        PrepareAsyncSubscribeStopVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse>*
        AsyncRespondStopVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse>*
        PrepareAsyncRespondStopVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<
            ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>*
        SubscribeStartVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>*
        AsyncSubscribeStartVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>*
        PrepareAsyncSubscribeStartVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>*
        AsyncRespondStartVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>*
        PrepareAsyncRespondStartVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<
            ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>*
        SubscribeStopVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>*
        AsyncSubscribeStopVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>*
        PrepareAsyncSubscribeStopVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>*
        AsyncRespondStopVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>*
        PrepareAsyncRespondStopVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::SetModeResponse>*
        SubscribeSetModeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SetModeResponse>*
        AsyncSubscribeSetModeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SetModeResponse>*
        PrepareAsyncSubscribeSetModeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSetModeResponse>*
        AsyncRespondSetModeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSetModeResponse>*
        PrepareAsyncRespondSetModeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<
            ::mavsdk::rpc::camera_server::StorageInformationResponse>*
        SubscribeStorageInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StorageInformationResponse>*
        AsyncSubscribeStorageInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::StorageInformationResponse>*
        PrepareAsyncSubscribeStorageInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>*
        AsyncRespondStorageInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>*
        PrepareAsyncRespondStorageInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::CaptureStatusResponse>*
        SubscribeCaptureStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::CaptureStatusResponse>*
        AsyncSubscribeCaptureStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::CaptureStatusResponse>*
        PrepareAsyncSubscribeCaptureStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>*
        AsyncRespondCaptureStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>*
        PrepareAsyncRespondCaptureStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::FormatStorageResponse>*
        SubscribeFormatStorageRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::FormatStorageResponse>*
        AsyncSubscribeFormatStorageRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::FormatStorageResponse>*
        PrepareAsyncSubscribeFormatStorageRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>*
        AsyncRespondFormatStorageRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>*
        PrepareAsyncRespondFormatStorageRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::ResetSettingsResponse>*
        SubscribeResetSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::ResetSettingsResponse>*
        AsyncSubscribeResetSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::ResetSettingsResponse>*
        PrepareAsyncSubscribeResetSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>*
        AsyncRespondResetSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>*
        PrepareAsyncRespondResetSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::SettingsResponse>*
        SubscribeSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SettingsResponse>*
        AsyncSubscribeSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::SettingsResponse>*
        PrepareAsyncSubscribeSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSettingsResponse>*
        AsyncRespondSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSettingsResponse>*
        PrepareAsyncRespondSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::SystemTimeResponse>*
        SubscribeSystemTimeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::SystemTimeResponse>*
        AsyncSubscribeSystemTimeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<
            ::mavsdk::rpc::camera_server::SystemTimeResponse>*
        PrepareAsyncSubscribeSystemTimeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>*
        AsyncRespondSystemTimeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>*
        PrepareAsyncRespondSystemTimeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientReaderInterface<::mavsdk::rpc::camera_server::ZoomRangeResponse>*
        SubscribeZoomRangeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::ZoomRangeResponse>*
        AsyncSubscribeZoomRangeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) = 0;
        virtual ::grpc::ClientAsyncReaderInterface<::mavsdk::rpc::camera_server::ZoomRangeResponse>*
        PrepareAsyncSubscribeZoomRangeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>*
        AsyncRespondZoomRangeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
        virtual ::grpc::ClientAsyncResponseReaderInterface<
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>*
        PrepareAsyncRespondZoomRangeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq) = 0;
    };
    class Stub final : public StubInterface {
    public:
        Stub(
            const std::shared_ptr<::grpc::ChannelInterface>& channel,
            const ::grpc::StubOptions& options = ::grpc::StubOptions());
        ::grpc::Status SetInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInformationRequest& request,
            ::mavsdk::rpc::camera_server::SetInformationResponse* response) override;
        std::unique_ptr<
            ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::SetInformationResponse>>
        AsyncSetInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInformationRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::SetInformationResponse>>(
                AsyncSetInformationRaw(context, request, cq));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::SetInformationResponse>>
        PrepareAsyncSetInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInformationRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::SetInformationResponse>>(
                PrepareAsyncSetInformationRaw(context, request, cq));
        }
        ::grpc::Status SetVideoStreamInfo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest& request,
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>>
        AsyncSetVideoStreamInfo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>>(
                AsyncSetVideoStreamInfoRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>>
        PrepareAsyncSetVideoStreamInfo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>>(
                PrepareAsyncSetVideoStreamInfoRaw(context, request, cq));
        }
        ::grpc::Status SetInProgress(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest& request,
            ::mavsdk::rpc::camera_server::SetInProgressResponse* response) override;
        std::unique_ptr<
            ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::SetInProgressResponse>>
        AsyncSetInProgress(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::SetInProgressResponse>>(
                AsyncSetInProgressRaw(context, request, cq));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::SetInProgressResponse>>
        PrepareAsyncSetInProgress(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::SetInProgressResponse>>(
                PrepareAsyncSetInProgressRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientReader<::mavsdk::rpc::camera_server::TakePhotoResponse>>
        SubscribeTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::TakePhotoResponse>>(
                SubscribeTakePhotoRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::TakePhotoResponse>>
        AsyncSubscribeTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::TakePhotoResponse>>(
                AsyncSubscribeTakePhotoRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::TakePhotoResponse>>
        PrepareAsyncSubscribeTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::TakePhotoResponse>>(
                PrepareAsyncSubscribeTakePhotoRaw(context, request, cq));
        }
        ::grpc::Status RespondTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest& request,
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>>
        AsyncRespondTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>>(
                AsyncRespondTakePhotoRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>>
        PrepareAsyncRespondTakePhoto(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>>(
                PrepareAsyncRespondTakePhotoRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientReader<::mavsdk::rpc::camera_server::StartVideoResponse>>
        SubscribeStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::StartVideoResponse>>(
                SubscribeStartVideoRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StartVideoResponse>>
        AsyncSubscribeStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StartVideoResponse>>(
                AsyncSubscribeStartVideoRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StartVideoResponse>>
        PrepareAsyncSubscribeStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StartVideoResponse>>(
                PrepareAsyncSubscribeStartVideoRaw(context, request, cq));
        }
        ::grpc::Status RespondStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest& request,
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse>>
        AsyncRespondStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse>>(
                AsyncRespondStartVideoRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse>>
        PrepareAsyncRespondStartVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse>>(
                PrepareAsyncRespondStartVideoRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientReader<::mavsdk::rpc::camera_server::StopVideoResponse>>
        SubscribeStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::StopVideoResponse>>(
                SubscribeStopVideoRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StopVideoResponse>>
        AsyncSubscribeStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StopVideoResponse>>(
                AsyncSubscribeStopVideoRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StopVideoResponse>>
        PrepareAsyncSubscribeStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StopVideoResponse>>(
                PrepareAsyncSubscribeStopVideoRaw(context, request, cq));
        }
        ::grpc::Status RespondStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest& request,
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse>>
        AsyncRespondStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse>>(
                AsyncRespondStopVideoRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse>>
        PrepareAsyncRespondStopVideo(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse>>(
                PrepareAsyncRespondStopVideoRaw(context, request, cq));
        }
        std::unique_ptr<
            ::grpc::ClientReader<::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>
        SubscribeStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>(
                SubscribeStartVideoStreamingRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>
        AsyncSubscribeStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>(
                AsyncSubscribeStartVideoStreamingRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>
        PrepareAsyncSubscribeStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>>(
                PrepareAsyncSubscribeStartVideoStreamingRaw(context, request, cq));
        }
        ::grpc::Status RespondStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest& request,
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>>
        AsyncRespondStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>>(
                AsyncRespondStartVideoStreamingRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>>
        PrepareAsyncRespondStartVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>>(
                PrepareAsyncRespondStartVideoStreamingRaw(context, request, cq));
        }
        std::unique_ptr<
            ::grpc::ClientReader<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>
        SubscribeStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>(
                SubscribeStopVideoStreamingRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>
        AsyncSubscribeStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>(
                AsyncSubscribeStopVideoStreamingRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>
        PrepareAsyncSubscribeStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>>(
                PrepareAsyncSubscribeStopVideoStreamingRaw(context, request, cq));
        }
        ::grpc::Status RespondStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest& request,
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>>
        AsyncRespondStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>>(
                AsyncRespondStopVideoStreamingRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>>
        PrepareAsyncRespondStopVideoStreaming(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>>(
                PrepareAsyncRespondStopVideoStreamingRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientReader<::mavsdk::rpc::camera_server::SetModeResponse>>
        SubscribeSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::SetModeResponse>>(
                SubscribeSetModeRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SetModeResponse>>
        AsyncSubscribeSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SetModeResponse>>(
                AsyncSubscribeSetModeRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SetModeResponse>>
        PrepareAsyncSubscribeSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SetModeResponse>>(
                PrepareAsyncSubscribeSetModeRaw(context, request, cq));
        }
        ::grpc::Status RespondSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest& request,
            ::mavsdk::rpc::camera_server::RespondSetModeResponse* response) override;
        std::unique_ptr<
            ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondSetModeResponse>>
        AsyncRespondSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondSetModeResponse>>(
                AsyncRespondSetModeRaw(context, request, cq));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondSetModeResponse>>
        PrepareAsyncRespondSetMode(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondSetModeResponse>>(
                PrepareAsyncRespondSetModeRaw(context, request, cq));
        }
        std::unique_ptr<
            ::grpc::ClientReader<::mavsdk::rpc::camera_server::StorageInformationResponse>>
        SubscribeStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::StorageInformationResponse>>(
                SubscribeStorageInformationRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StorageInformationResponse>>
        AsyncSubscribeStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::camera_server::StorageInformationResponse>>(
                AsyncSubscribeStorageInformationRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StorageInformationResponse>>
        PrepareAsyncSubscribeStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncReader<
                ::mavsdk::rpc::camera_server::StorageInformationResponse>>(
                PrepareAsyncSubscribeStorageInformationRaw(context, request, cq));
        }
        ::grpc::Status RespondStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest& request,
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>>
        AsyncRespondStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>>(
                AsyncRespondStorageInformationRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>>
        PrepareAsyncRespondStorageInformation(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>>(
                PrepareAsyncRespondStorageInformationRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientReader<::mavsdk::rpc::camera_server::CaptureStatusResponse>>
        SubscribeCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::CaptureStatusResponse>>(
                SubscribeCaptureStatusRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::CaptureStatusResponse>>
        AsyncSubscribeCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::CaptureStatusResponse>>(
                AsyncSubscribeCaptureStatusRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::CaptureStatusResponse>>
        PrepareAsyncSubscribeCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::CaptureStatusResponse>>(
                PrepareAsyncSubscribeCaptureStatusRaw(context, request, cq));
        }
        ::grpc::Status RespondCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest& request,
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>>
        AsyncRespondCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>>(
                AsyncRespondCaptureStatusRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>>
        PrepareAsyncRespondCaptureStatus(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>>(
                PrepareAsyncRespondCaptureStatusRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientReader<::mavsdk::rpc::camera_server::FormatStorageResponse>>
        SubscribeFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::FormatStorageResponse>>(
                SubscribeFormatStorageRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::FormatStorageResponse>>
        AsyncSubscribeFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::FormatStorageResponse>>(
                AsyncSubscribeFormatStorageRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::FormatStorageResponse>>
        PrepareAsyncSubscribeFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::FormatStorageResponse>>(
                PrepareAsyncSubscribeFormatStorageRaw(context, request, cq));
        }
        ::grpc::Status RespondFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest& request,
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>>
        AsyncRespondFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>>(
                AsyncRespondFormatStorageRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>>
        PrepareAsyncRespondFormatStorage(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>>(
                PrepareAsyncRespondFormatStorageRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientReader<::mavsdk::rpc::camera_server::ResetSettingsResponse>>
        SubscribeResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::ResetSettingsResponse>>(
                SubscribeResetSettingsRaw(context, request));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ResetSettingsResponse>>
        AsyncSubscribeResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ResetSettingsResponse>>(
                AsyncSubscribeResetSettingsRaw(context, request, cq, tag));
        }
        std::unique_ptr<
            ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ResetSettingsResponse>>
        PrepareAsyncSubscribeResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ResetSettingsResponse>>(
                PrepareAsyncSubscribeResetSettingsRaw(context, request, cq));
        }
        ::grpc::Status RespondResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest& request,
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>>
        AsyncRespondResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>>(
                AsyncRespondResetSettingsRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>>
        PrepareAsyncRespondResetSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>>(
                PrepareAsyncRespondResetSettingsRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientReader<::mavsdk::rpc::camera_server::SettingsResponse>>
        SubscribeSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::SettingsResponse>>(
                SubscribeSettingsRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SettingsResponse>>
        AsyncSubscribeSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SettingsResponse>>(
                AsyncSubscribeSettingsRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SettingsResponse>>
        PrepareAsyncSubscribeSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SettingsResponse>>(
                PrepareAsyncSubscribeSettingsRaw(context, request, cq));
        }
        ::grpc::Status RespondSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest& request,
            ::mavsdk::rpc::camera_server::RespondSettingsResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondSettingsResponse>>
        AsyncRespondSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondSettingsResponse>>(
                AsyncRespondSettingsRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondSettingsResponse>>
        PrepareAsyncRespondSettings(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondSettingsResponse>>(
                PrepareAsyncRespondSettingsRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientReader<::mavsdk::rpc::camera_server::SystemTimeResponse>>
        SubscribeSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::SystemTimeResponse>>(
                SubscribeSystemTimeRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SystemTimeResponse>>
        AsyncSubscribeSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SystemTimeResponse>>(
                AsyncSubscribeSystemTimeRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SystemTimeResponse>>
        PrepareAsyncSubscribeSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SystemTimeResponse>>(
                PrepareAsyncSubscribeSystemTimeRaw(context, request, cq));
        }
        ::grpc::Status RespondSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest& request,
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>>
        AsyncRespondSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>>(
                AsyncRespondSystemTimeRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>>
        PrepareAsyncRespondSystemTime(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>>(
                PrepareAsyncRespondSystemTimeRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientReader<::mavsdk::rpc::camera_server::ZoomRangeResponse>>
        SubscribeZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request)
        {
            return std::unique_ptr<
                ::grpc::ClientReader<::mavsdk::rpc::camera_server::ZoomRangeResponse>>(
                SubscribeZoomRangeRaw(context, request));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ZoomRangeResponse>>
        AsyncSubscribeZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ZoomRangeResponse>>(
                AsyncSubscribeZoomRangeRaw(context, request, cq, tag));
        }
        std::unique_ptr<::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ZoomRangeResponse>>
        PrepareAsyncSubscribeZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<
                ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ZoomRangeResponse>>(
                PrepareAsyncSubscribeZoomRangeRaw(context, request, cq));
        }
        ::grpc::Status RespondZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest& request,
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* response) override;
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>>
        AsyncRespondZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>>(
                AsyncRespondZoomRangeRaw(context, request, cq));
        }
        std::unique_ptr<::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>>
        PrepareAsyncRespondZoomRange(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq)
        {
            return std::unique_ptr<::grpc::ClientAsyncResponseReader<
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>>(
                PrepareAsyncRespondZoomRangeRaw(context, request, cq));
        }
        class async final : public StubInterface::async_interface {
        public:
            void SetInformation(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetInformationRequest* request,
                ::mavsdk::rpc::camera_server::SetInformationResponse* response,
                std::function<void(::grpc::Status)>) override;
            void SetInformation(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetInformationRequest* request,
                ::mavsdk::rpc::camera_server::SetInformationResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SetVideoStreamInfo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* request,
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* response,
                std::function<void(::grpc::Status)>) override;
            void SetVideoStreamInfo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* request,
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SetInProgress(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetInProgressRequest* request,
                ::mavsdk::rpc::camera_server::SetInProgressResponse* response,
                std::function<void(::grpc::Status)>) override;
            void SetInProgress(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SetInProgressRequest* request,
                ::mavsdk::rpc::camera_server::SetInProgressResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeTakePhoto(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::TakePhotoResponse>* reactor)
                override;
            void RespondTakePhoto(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* request,
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondTakePhoto(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* request,
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeStartVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::StartVideoResponse>*
                    reactor) override;
            void RespondStartVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* request,
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondStartVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* request,
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeStopVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::StopVideoResponse>* reactor)
                override;
            void RespondStopVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* request,
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondStopVideo(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* request,
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeStartVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* request,
                ::grpc::ClientReadReactor<
                    ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>* reactor) override;
            void RespondStartVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* request,
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondStartVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* request,
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeStopVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>*
                    reactor) override;
            void RespondStopVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* request,
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondStopVideoStreaming(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* request,
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeSetMode(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::SetModeResponse>* reactor)
                override;
            void RespondSetMode(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSetModeRequest* request,
                ::mavsdk::rpc::camera_server::RespondSetModeResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondSetMode(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSetModeRequest* request,
                ::mavsdk::rpc::camera_server::RespondSetModeResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeStorageInformation(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::StorageInformationResponse>*
                    reactor) override;
            void RespondStorageInformation(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* request,
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondStorageInformation(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* request,
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeCaptureStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::CaptureStatusResponse>*
                    reactor) override;
            void RespondCaptureStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* request,
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondCaptureStatus(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* request,
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeFormatStorage(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::FormatStorageResponse>*
                    reactor) override;
            void RespondFormatStorage(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* request,
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondFormatStorage(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* request,
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeResetSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::ResetSettingsResponse>*
                    reactor) override;
            void RespondResetSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* request,
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondResetSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* request,
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::SettingsResponse>* reactor)
                override;
            void RespondSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSettingsRequest* request,
                ::mavsdk::rpc::camera_server::RespondSettingsResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondSettings(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSettingsRequest* request,
                ::mavsdk::rpc::camera_server::RespondSettingsResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeSystemTime(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::SystemTimeResponse>*
                    reactor) override;
            void RespondSystemTime(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* request,
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondSystemTime(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* request,
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;
            void SubscribeZoomRange(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* request,
                ::grpc::ClientReadReactor<::mavsdk::rpc::camera_server::ZoomRangeResponse>* reactor)
                override;
            void RespondZoomRange(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* request,
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* response,
                std::function<void(::grpc::Status)>) override;
            void RespondZoomRange(
                ::grpc::ClientContext* context,
                const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* request,
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* response,
                ::grpc::ClientUnaryReactor* reactor) override;

        private:
            friend class Stub;
            explicit async(Stub* stub) : stub_(stub) {}
            Stub* stub() { return stub_; }
            Stub* stub_;
        };
        class async* async() override { return &async_stub_; }

    private:
        std::shared_ptr<::grpc::ChannelInterface> channel_;
        class async async_stub_ {
            this
        };
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::SetInformationResponse>*
        AsyncSetInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInformationRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::SetInformationResponse>*
        PrepareAsyncSetInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInformationRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>*
        AsyncSetVideoStreamInfoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>*
        PrepareAsyncSetVideoStreamInfoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::SetInProgressResponse>*
        AsyncSetInProgressRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::SetInProgressResponse>*
        PrepareAsyncSetInProgressRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::TakePhotoResponse>*
        SubscribeTakePhotoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::TakePhotoResponse>*
        AsyncSubscribeTakePhotoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::TakePhotoResponse>*
        PrepareAsyncSubscribeTakePhotoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondTakePhotoResponse>*
        AsyncRespondTakePhotoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondTakePhotoResponse>*
        PrepareAsyncRespondTakePhotoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::StartVideoResponse>*
        SubscribeStartVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StartVideoResponse>*
        AsyncSubscribeStartVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StartVideoResponse>*
        PrepareAsyncSubscribeStartVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondStartVideoResponse>*
        AsyncRespondStartVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondStartVideoResponse>*
        PrepareAsyncRespondStartVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::StopVideoResponse>*
        SubscribeStopVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StopVideoResponse>*
        AsyncSubscribeStopVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StopVideoResponse>*
        PrepareAsyncSubscribeStopVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondStopVideoResponse>*
        AsyncRespondStopVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondStopVideoResponse>*
        PrepareAsyncRespondStopVideoRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::StartVideoStreamingResponse>*
        SubscribeStartVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request)
            override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StartVideoStreamingResponse>*
        AsyncSubscribeStartVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StartVideoStreamingResponse>*
        PrepareAsyncSubscribeStartVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>*
        AsyncRespondStartVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>*
        PrepareAsyncRespondStartVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>*
        SubscribeStopVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request)
            override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>*
        AsyncSubscribeStopVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>*
        PrepareAsyncSubscribeStopVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>*
        AsyncRespondStopVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>*
        PrepareAsyncRespondStopVideoStreamingRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::SetModeResponse>* SubscribeSetModeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SetModeResponse>*
        AsyncSubscribeSetModeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SetModeResponse>*
        PrepareAsyncSubscribeSetModeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondSetModeResponse>*
        AsyncRespondSetModeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondSetModeResponse>*
        PrepareAsyncRespondSetModeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::StorageInformationResponse>*
        SubscribeStorageInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request)
            override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StorageInformationResponse>*
        AsyncSubscribeStorageInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::StorageInformationResponse>*
        PrepareAsyncSubscribeStorageInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>*
        AsyncRespondStorageInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>*
        PrepareAsyncRespondStorageInformationRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::CaptureStatusResponse>*
        SubscribeCaptureStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::CaptureStatusResponse>*
        AsyncSubscribeCaptureStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::CaptureStatusResponse>*
        PrepareAsyncSubscribeCaptureStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>*
        AsyncRespondCaptureStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>*
        PrepareAsyncRespondCaptureStatusRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::FormatStorageResponse>*
        SubscribeFormatStorageRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::FormatStorageResponse>*
        AsyncSubscribeFormatStorageRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::FormatStorageResponse>*
        PrepareAsyncSubscribeFormatStorageRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>*
        AsyncRespondFormatStorageRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>*
        PrepareAsyncRespondFormatStorageRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::ResetSettingsResponse>*
        SubscribeResetSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ResetSettingsResponse>*
        AsyncSubscribeResetSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ResetSettingsResponse>*
        PrepareAsyncSubscribeResetSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>*
        AsyncRespondResetSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>*
        PrepareAsyncRespondResetSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::SettingsResponse>* SubscribeSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SettingsResponse>*
        AsyncSubscribeSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SettingsResponse>*
        PrepareAsyncSubscribeSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondSettingsResponse>*
        AsyncRespondSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondSettingsResponse>*
        PrepareAsyncRespondSettingsRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::SystemTimeResponse>*
        SubscribeSystemTimeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SystemTimeResponse>*
        AsyncSubscribeSystemTimeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::SystemTimeResponse>*
        PrepareAsyncSubscribeSystemTimeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondSystemTimeResponse>*
        AsyncRespondSystemTimeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondSystemTimeResponse>*
        PrepareAsyncRespondSystemTimeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientReader<::mavsdk::rpc::camera_server::ZoomRangeResponse>*
        SubscribeZoomRangeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ZoomRangeResponse>*
        AsyncSubscribeZoomRangeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq,
            void* tag) override;
        ::grpc::ClientAsyncReader<::mavsdk::rpc::camera_server::ZoomRangeResponse>*
        PrepareAsyncSubscribeZoomRangeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondZoomRangeResponse>*
        AsyncRespondZoomRangeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq) override;
        ::grpc::ClientAsyncResponseReader<::mavsdk::rpc::camera_server::RespondZoomRangeResponse>*
        PrepareAsyncRespondZoomRangeRaw(
            ::grpc::ClientContext* context,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest& request,
            ::grpc::CompletionQueue* cq) override;
        const ::grpc::internal::RpcMethod rpcmethod_SetInformation_;
        const ::grpc::internal::RpcMethod rpcmethod_SetVideoStreamInfo_;
        const ::grpc::internal::RpcMethod rpcmethod_SetInProgress_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeTakePhoto_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondTakePhoto_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeStartVideo_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondStartVideo_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeStopVideo_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondStopVideo_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeStartVideoStreaming_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondStartVideoStreaming_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeStopVideoStreaming_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondStopVideoStreaming_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeSetMode_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondSetMode_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeStorageInformation_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondStorageInformation_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeCaptureStatus_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondCaptureStatus_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeFormatStorage_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondFormatStorage_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeResetSettings_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondResetSettings_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeSettings_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondSettings_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeSystemTime_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondSystemTime_;
        const ::grpc::internal::RpcMethod rpcmethod_SubscribeZoomRange_;
        const ::grpc::internal::RpcMethod rpcmethod_RespondZoomRange_;
    };
    static std::unique_ptr<Stub> NewStub(
        const std::shared_ptr<::grpc::ChannelInterface>& channel,
        const ::grpc::StubOptions& options = ::grpc::StubOptions());

    class Service : public ::grpc::Service {
    public:
        Service();
        virtual ~Service();
        // Sets the camera information. This must be called as soon as the camera server is created.
        virtual ::grpc::Status SetInformation(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SetInformationRequest* request,
            ::mavsdk::rpc::camera_server::SetInformationResponse* response);
        // Sets video stream info.
        virtual ::grpc::Status SetVideoStreamInfo(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* request,
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* response);
        // Sets image capture in progress status flags. This should be set to true when the camera
        // is busy taking a photo and false when it is done.
        virtual ::grpc::Status SetInProgress(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest* request,
            ::mavsdk::rpc::camera_server::SetInProgressResponse* response);
        // Subscribe to image capture requests. Each request received should respond to using
        // RespondTakePhoto.
        virtual ::grpc::Status SubscribeTakePhoto(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::TakePhotoResponse>* writer);
        // Respond to an image capture request from SubscribeTakePhoto.
        virtual ::grpc::Status RespondTakePhoto(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* request,
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* response);
        // Subscribe to start video requests. Each request received should respond to using
        // RespondStartVideo
        virtual ::grpc::Status SubscribeStartVideo(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StartVideoResponse>* writer);
        // Subscribe to stop video requests. Each request received should respond using
        // StopVideoResponse
        virtual ::grpc::Status RespondStartVideo(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* request,
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse* response);
        // Subscribe to stop video requests. Each request received should response to using
        // RespondStopVideo
        virtual ::grpc::Status SubscribeStopVideo(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StopVideoResponse>* writer);
        // Respond to stop video request from SubscribeStopVideo.
        virtual ::grpc::Status RespondStopVideo(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* request,
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse* response);
        // Subscribe to start video streaming requests. Each request received should response to
        // using RespondStartVideoStreaming
        virtual ::grpc::Status SubscribeStartVideoStreaming(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StartVideoStreamingResponse>*
                writer);
        // Respond to start video streaming from SubscribeStartVideoStreaming.
        virtual ::grpc::Status RespondStartVideoStreaming(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* request,
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* response);
        // Subscribe to stop video streaming requests. Each request received should response to
        // using RespondStopVideoStreaming
        virtual ::grpc::Status SubscribeStopVideoStreaming(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>* writer);
        // Respond to stop video streaming from SubscribeStopVideoStreaming.
        virtual ::grpc::Status RespondStopVideoStreaming(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* request,
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* response);
        // Subscribe to set camera mode requests. Each request received should response to using
        // RespondSetMode
        virtual ::grpc::Status SubscribeSetMode(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SetModeResponse>* writer);
        // Respond to set camera mode from SubscribeSetMode.
        virtual ::grpc::Status RespondSetMode(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest* request,
            ::mavsdk::rpc::camera_server::RespondSetModeResponse* response);
        // Subscribe to camera storage information requests. Each request received should response
        // to using RespondStorageInformation
        virtual ::grpc::Status SubscribeStorageInformation(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StorageInformationResponse>* writer);
        // Respond to camera storage information from SubscribeStorageInformation.
        virtual ::grpc::Status RespondStorageInformation(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* request,
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* response);
        // Subscribe to camera capture status requests. Each request received should response to
        // using RespondCaptureStatus
        virtual ::grpc::Status SubscribeCaptureStatus(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::CaptureStatusResponse>* writer);
        // Respond to camera capture status from SubscribeCaptureStatus.
        virtual ::grpc::Status RespondCaptureStatus(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* request,
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* response);
        // Subscribe to format storage requests. Each request received should response to using
        // RespondFormatStorage
        virtual ::grpc::Status SubscribeFormatStorage(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::FormatStorageResponse>* writer);
        // Respond to format storage from SubscribeFormatStorage.
        virtual ::grpc::Status RespondFormatStorage(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* request,
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* response);
        // Subscribe to reset settings requests. Each request received should response to using
        // RespondResetSettings
        virtual ::grpc::Status SubscribeResetSettings(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ResetSettingsResponse>* writer);
        // Respond to reset settings from SubscribeResetSettings.
        virtual ::grpc::Status RespondResetSettings(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* request,
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* response);
        // Subscribe to camera settings requests. Each request received should response to using
        // RespondSettings.
        virtual ::grpc::Status SubscribeSettings(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SettingsResponse>* writer);
        // Respond to camera settings from SubscribeSettings.
        virtual ::grpc::Status RespondSettings(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest* request,
            ::mavsdk::rpc::camera_server::RespondSettingsResponse* response);
        // Subscribe system time requests. Each request received should response to using
        // RespondSystemTime.
        virtual ::grpc::Status SubscribeSystemTime(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SystemTimeResponse>* writer);
        // Respond to system time from SubscribeSystemTime.
        virtual ::grpc::Status RespondSystemTime(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* request,
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* response);
        // Subscribe to zoom range command
        virtual ::grpc::Status SubscribeZoomRange(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* request,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ZoomRangeResponse>* writer);
        // Respond to zoom range.
        virtual ::grpc::Status RespondZoomRange(
            ::grpc::ServerContext* context,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* request,
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* response);
    };
    template<class BaseClass> class WithAsyncMethod_SetInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SetInformation() { ::grpc::Service::MarkMethodAsync(0); }
        ~WithAsyncMethod_SetInformation() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetInformation(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SetInformationRequest* request,
            ::grpc::ServerAsyncResponseWriter<::mavsdk::rpc::camera_server::SetInformationResponse>*
                response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                0, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SetVideoStreamInfo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SetVideoStreamInfo() { ::grpc::Service::MarkMethodAsync(1); }
        ~WithAsyncMethod_SetVideoStreamInfo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetVideoStreamInfo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetVideoStreamInfo(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                1, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SetInProgress : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SetInProgress() { ::grpc::Service::MarkMethodAsync(2); }
        ~WithAsyncMethod_SetInProgress() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetInProgress(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInProgressResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetInProgress(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SetInProgressRequest* request,
            ::grpc::ServerAsyncResponseWriter<::mavsdk::rpc::camera_server::SetInProgressResponse>*
                response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                2, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeTakePhoto() { ::grpc::Service::MarkMethodAsync(3); }
        ~WithAsyncMethod_SubscribeTakePhoto() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::TakePhotoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeTakePhoto(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::TakePhotoResponse>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                3, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondTakePhoto() { ::grpc::Service::MarkMethodAsync(4); }
        ~WithAsyncMethod_RespondTakePhoto() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondTakePhoto(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                4, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeStartVideo() { ::grpc::Service::MarkMethodAsync(5); }
        ~WithAsyncMethod_SubscribeStartVideo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StartVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeStartVideo(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::StartVideoResponse>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                5, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondStartVideo() { ::grpc::Service::MarkMethodAsync(6); }
        ~WithAsyncMethod_RespondStartVideo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondStartVideo(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondStartVideoRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                6, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeStopVideo() { ::grpc::Service::MarkMethodAsync(7); }
        ~WithAsyncMethod_SubscribeStopVideo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StopVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeStopVideo(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::StopVideoResponse>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                7, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondStopVideo() { ::grpc::Service::MarkMethodAsync(8); }
        ~WithAsyncMethod_RespondStopVideo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondStopVideo(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondStopVideoRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                8, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass>
    class WithAsyncMethod_SubscribeStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeStartVideoStreaming() { ::grpc::Service::MarkMethodAsync(9); }
        ~WithAsyncMethod_SubscribeStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeStartVideoStreaming(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::StartVideoStreamingResponse>*
                writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                9, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondStartVideoStreaming() { ::grpc::Service::MarkMethodAsync(10); }
        ~WithAsyncMethod_RespondStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondStartVideoStreaming(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                10, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeStopVideoStreaming() { ::grpc::Service::MarkMethodAsync(11); }
        ~WithAsyncMethod_SubscribeStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeStopVideoStreaming(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::StopVideoStreamingResponse>*
                writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                11, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondStopVideoStreaming() { ::grpc::Service::MarkMethodAsync(12); }
        ~WithAsyncMethod_RespondStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondStopVideoStreaming(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                12, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeSetMode() { ::grpc::Service::MarkMethodAsync(13); }
        ~WithAsyncMethod_SubscribeSetMode() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SetModeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeSetMode(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::SetModeResponse>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                13, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondSetMode() { ::grpc::Service::MarkMethodAsync(14); }
        ~WithAsyncMethod_RespondSetMode() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSetModeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondSetMode(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondSetModeRequest* request,
            ::grpc::ServerAsyncResponseWriter<::mavsdk::rpc::camera_server::RespondSetModeResponse>*
                response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                14, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeStorageInformation() { ::grpc::Service::MarkMethodAsync(15); }
        ~WithAsyncMethod_SubscribeStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StorageInformationResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeStorageInformation(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::StorageInformationResponse>*
                writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                15, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondStorageInformation() { ::grpc::Service::MarkMethodAsync(16); }
        ~WithAsyncMethod_RespondStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondStorageInformation(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                16, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeCaptureStatus() { ::grpc::Service::MarkMethodAsync(17); }
        ~WithAsyncMethod_SubscribeCaptureStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::CaptureStatusResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeCaptureStatus(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::CaptureStatusResponse>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                17, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondCaptureStatus() { ::grpc::Service::MarkMethodAsync(18); }
        ~WithAsyncMethod_RespondCaptureStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondCaptureStatus(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                18, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeFormatStorage() { ::grpc::Service::MarkMethodAsync(19); }
        ~WithAsyncMethod_SubscribeFormatStorage() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::FormatStorageResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeFormatStorage(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::FormatStorageResponse>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                19, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondFormatStorage() { ::grpc::Service::MarkMethodAsync(20); }
        ~WithAsyncMethod_RespondFormatStorage() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondFormatStorage(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                20, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeResetSettings() { ::grpc::Service::MarkMethodAsync(21); }
        ~WithAsyncMethod_SubscribeResetSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ResetSettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeResetSettings(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::ResetSettingsResponse>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                21, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondResetSettings() { ::grpc::Service::MarkMethodAsync(22); }
        ~WithAsyncMethod_RespondResetSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondResetSettings(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                22, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeSettings() { ::grpc::Service::MarkMethodAsync(23); }
        ~WithAsyncMethod_SubscribeSettings() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeSettings(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::SettingsResponse>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                23, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondSettings() { ::grpc::Service::MarkMethodAsync(24); }
        ~WithAsyncMethod_RespondSettings() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondSettings(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondSettingsRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondSettingsResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                24, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeSystemTime() { ::grpc::Service::MarkMethodAsync(25); }
        ~WithAsyncMethod_SubscribeSystemTime() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SystemTimeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeSystemTime(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::SystemTimeResponse>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                25, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondSystemTime() { ::grpc::Service::MarkMethodAsync(26); }
        ~WithAsyncMethod_RespondSystemTime() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondSystemTime(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                26, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_SubscribeZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_SubscribeZoomRange() { ::grpc::Service::MarkMethodAsync(27); }
        ~WithAsyncMethod_SubscribeZoomRange() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ZoomRangeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeZoomRange(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* request,
            ::grpc::ServerAsyncWriter<::mavsdk::rpc::camera_server::ZoomRangeResponse>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                27, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithAsyncMethod_RespondZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithAsyncMethod_RespondZoomRange() { ::grpc::Service::MarkMethodAsync(28); }
        ~WithAsyncMethod_RespondZoomRange() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondZoomRange(
            ::grpc::ServerContext* context,
            ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* request,
            ::grpc::ServerAsyncResponseWriter<
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                28, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    typedef WithAsyncMethod_SetInformation<WithAsyncMethod_SetVideoStreamInfo<WithAsyncMethod_SetInProgress<
        WithAsyncMethod_SubscribeTakePhoto<WithAsyncMethod_RespondTakePhoto<WithAsyncMethod_SubscribeStartVideo<
            WithAsyncMethod_RespondStartVideo<WithAsyncMethod_SubscribeStopVideo<
                WithAsyncMethod_RespondStopVideo<WithAsyncMethod_SubscribeStartVideoStreaming<
                    WithAsyncMethod_RespondStartVideoStreaming<WithAsyncMethod_SubscribeStopVideoStreaming<
                        WithAsyncMethod_RespondStopVideoStreaming<WithAsyncMethod_SubscribeSetMode<
                            WithAsyncMethod_RespondSetMode<WithAsyncMethod_SubscribeStorageInformation<
                                WithAsyncMethod_RespondStorageInformation<WithAsyncMethod_SubscribeCaptureStatus<
                                    WithAsyncMethod_RespondCaptureStatus<WithAsyncMethod_SubscribeFormatStorage<
                                        WithAsyncMethod_RespondFormatStorage<WithAsyncMethod_SubscribeResetSettings<
                                            WithAsyncMethod_RespondResetSettings<
                                                WithAsyncMethod_SubscribeSettings<WithAsyncMethod_RespondSettings<
                                                    WithAsyncMethod_SubscribeSystemTime<
                                                        WithAsyncMethod_RespondSystemTime<
                                                            WithAsyncMethod_SubscribeZoomRange<
                                                                WithAsyncMethod_RespondZoomRange<
                                                                    Service>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        AsyncService;
    template<class BaseClass> class WithCallbackMethod_SetInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SetInformation()
        {
            ::grpc::Service::MarkMethodCallback(
                0,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::SetInformationRequest,
                    ::mavsdk::rpc::camera_server::SetInformationResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SetInformationRequest* request,
                        ::mavsdk::rpc::camera_server::SetInformationResponse* response) {
                        return this->SetInformation(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_SetInformation(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::SetInformationRequest,
                ::mavsdk::rpc::camera_server::SetInformationResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::SetInformationRequest,
                ::mavsdk::rpc::camera_server::SetInformationResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_SetInformation() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* SetInformation(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInformationResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SetVideoStreamInfo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SetVideoStreamInfo()
        {
            ::grpc::Service::MarkMethodCallback(
                1,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest,
                    ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* request,
                        ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* response) {
                        return this->SetVideoStreamInfo(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_SetVideoStreamInfo(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest,
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest,
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_SetVideoStreamInfo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetVideoStreamInfo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* SetVideoStreamInfo(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SetInProgress : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SetInProgress()
        {
            ::grpc::Service::MarkMethodCallback(
                2,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::SetInProgressRequest,
                    ::mavsdk::rpc::camera_server::SetInProgressResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SetInProgressRequest* request,
                        ::mavsdk::rpc::camera_server::SetInProgressResponse* response) {
                        return this->SetInProgress(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_SetInProgress(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::SetInProgressRequest,
                ::mavsdk::rpc::camera_server::SetInProgressResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::SetInProgressRequest,
                ::mavsdk::rpc::camera_server::SetInProgressResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_SetInProgress() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetInProgress(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInProgressResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* SetInProgress(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInProgressResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SubscribeTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeTakePhoto()
        {
            ::grpc::Service::MarkMethodCallback(
                3,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest,
                    ::mavsdk::rpc::camera_server::TakePhotoResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* request) {
                        return this->SubscribeTakePhoto(context, request);
                    }));
        }
        ~WithCallbackMethod_SubscribeTakePhoto() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::TakePhotoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::mavsdk::rpc::camera_server::TakePhotoResponse>*
        SubscribeTakePhoto(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_RespondTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondTakePhoto()
        {
            ::grpc::Service::MarkMethodCallback(
                4,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondTakePhotoRequest,
                    ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* request,
                        ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* response) {
                        return this->RespondTakePhoto(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondTakePhoto(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondTakePhotoRequest,
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondTakePhotoRequest,
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondTakePhoto() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondTakePhoto(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SubscribeStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeStartVideo()
        {
            ::grpc::Service::MarkMethodCallback(
                5,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest,
                    ::mavsdk::rpc::camera_server::StartVideoResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* request) {
                        return this->SubscribeStartVideo(context, request);
                    }));
        }
        ~WithCallbackMethod_SubscribeStartVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StartVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::mavsdk::rpc::camera_server::StartVideoResponse>*
        SubscribeStartVideo(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_RespondStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondStartVideo()
        {
            ::grpc::Service::MarkMethodCallback(
                6,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondStartVideoRequest,
                    ::mavsdk::rpc::camera_server::RespondStartVideoResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* request,
                        ::mavsdk::rpc::camera_server::RespondStartVideoResponse* response) {
                        return this->RespondStartVideo(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondStartVideo(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondStartVideoRequest,
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondStartVideoRequest,
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondStartVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondStartVideo(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SubscribeStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeStopVideo()
        {
            ::grpc::Service::MarkMethodCallback(
                7,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest,
                    ::mavsdk::rpc::camera_server::StopVideoResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* request) {
                        return this->SubscribeStopVideo(context, request);
                    }));
        }
        ~WithCallbackMethod_SubscribeStopVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StopVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::mavsdk::rpc::camera_server::StopVideoResponse>*
        SubscribeStopVideo(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_RespondStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondStopVideo()
        {
            ::grpc::Service::MarkMethodCallback(
                8,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondStopVideoRequest,
                    ::mavsdk::rpc::camera_server::RespondStopVideoResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* request,
                        ::mavsdk::rpc::camera_server::RespondStopVideoResponse* response) {
                        return this->RespondStopVideo(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondStopVideo(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondStopVideoRequest,
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondStopVideoRequest,
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondStopVideo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondStopVideo(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithCallbackMethod_SubscribeStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeStartVideoStreaming()
        {
            ::grpc::Service::MarkMethodCallback(
                9,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest,
                    ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest*
                            request) {
                        return this->SubscribeStartVideoStreaming(context, request);
                    }));
        }
        ~WithCallbackMethod_SubscribeStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<
            ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>*
        SubscribeStartVideoStreaming(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithCallbackMethod_RespondStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondStartVideoStreaming()
        {
            ::grpc::Service::MarkMethodCallback(
                10,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest,
                    ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest*
                            request,
                        ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse*
                            response) {
                        return this->RespondStartVideoStreaming(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondStartVideoStreaming(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest,
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest,
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondStartVideoStreaming(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithCallbackMethod_SubscribeStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeStopVideoStreaming()
        {
            ::grpc::Service::MarkMethodCallback(
                11,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest,
                    ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest*
                            request) {
                        return this->SubscribeStopVideoStreaming(context, request);
                    }));
        }
        ~WithCallbackMethod_SubscribeStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<
            ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>*
        SubscribeStopVideoStreaming(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithCallbackMethod_RespondStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondStopVideoStreaming()
        {
            ::grpc::Service::MarkMethodCallback(
                12,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest,
                    ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest*
                            request,
                        ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* response) {
                        return this->RespondStopVideoStreaming(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondStopVideoStreaming(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest,
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest,
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondStopVideoStreaming(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SubscribeSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeSetMode()
        {
            ::grpc::Service::MarkMethodCallback(
                13,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeSetModeRequest,
                    ::mavsdk::rpc::camera_server::SetModeResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* request) {
                        return this->SubscribeSetMode(context, request);
                    }));
        }
        ~WithCallbackMethod_SubscribeSetMode() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SetModeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::mavsdk::rpc::camera_server::SetModeResponse>*
        SubscribeSetMode(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_RespondSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondSetMode()
        {
            ::grpc::Service::MarkMethodCallback(
                14,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondSetModeRequest,
                    ::mavsdk::rpc::camera_server::RespondSetModeResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondSetModeRequest* request,
                        ::mavsdk::rpc::camera_server::RespondSetModeResponse* response) {
                        return this->RespondSetMode(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondSetMode(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondSetModeRequest,
                ::mavsdk::rpc::camera_server::RespondSetModeResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondSetModeRequest,
                ::mavsdk::rpc::camera_server::RespondSetModeResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondSetMode() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSetModeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondSetMode(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSetModeResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithCallbackMethod_SubscribeStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeStorageInformation()
        {
            ::grpc::Service::MarkMethodCallback(
                15,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest,
                    ::mavsdk::rpc::camera_server::StorageInformationResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest*
                            request) {
                        return this->SubscribeStorageInformation(context, request);
                    }));
        }
        ~WithCallbackMethod_SubscribeStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StorageInformationResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<
            ::mavsdk::rpc::camera_server::StorageInformationResponse>*
        SubscribeStorageInformation(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithCallbackMethod_RespondStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondStorageInformation()
        {
            ::grpc::Service::MarkMethodCallback(
                16,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondStorageInformationRequest,
                    ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest*
                            request,
                        ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* response) {
                        return this->RespondStorageInformation(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondStorageInformation(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondStorageInformationRequest,
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondStorageInformationRequest,
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondStorageInformation(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SubscribeCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeCaptureStatus()
        {
            ::grpc::Service::MarkMethodCallback(
                17,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest,
                    ::mavsdk::rpc::camera_server::CaptureStatusResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest*
                            request) { return this->SubscribeCaptureStatus(context, request); }));
        }
        ~WithCallbackMethod_SubscribeCaptureStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::CaptureStatusResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::mavsdk::rpc::camera_server::CaptureStatusResponse>*
        SubscribeCaptureStatus(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_RespondCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondCaptureStatus()
        {
            ::grpc::Service::MarkMethodCallback(
                18,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest,
                    ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* request,
                        ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* response) {
                        return this->RespondCaptureStatus(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondCaptureStatus(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest,
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest,
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondCaptureStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondCaptureStatus(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SubscribeFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeFormatStorage()
        {
            ::grpc::Service::MarkMethodCallback(
                19,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest,
                    ::mavsdk::rpc::camera_server::FormatStorageResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest*
                            request) { return this->SubscribeFormatStorage(context, request); }));
        }
        ~WithCallbackMethod_SubscribeFormatStorage() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::FormatStorageResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::mavsdk::rpc::camera_server::FormatStorageResponse>*
        SubscribeFormatStorage(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_RespondFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondFormatStorage()
        {
            ::grpc::Service::MarkMethodCallback(
                20,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondFormatStorageRequest,
                    ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* request,
                        ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* response) {
                        return this->RespondFormatStorage(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondFormatStorage(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondFormatStorageRequest,
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondFormatStorageRequest,
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondFormatStorage() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondFormatStorage(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SubscribeResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeResetSettings()
        {
            ::grpc::Service::MarkMethodCallback(
                21,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest,
                    ::mavsdk::rpc::camera_server::ResetSettingsResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest*
                            request) { return this->SubscribeResetSettings(context, request); }));
        }
        ~WithCallbackMethod_SubscribeResetSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ResetSettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::mavsdk::rpc::camera_server::ResetSettingsResponse>*
        SubscribeResetSettings(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_RespondResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondResetSettings()
        {
            ::grpc::Service::MarkMethodCallback(
                22,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondResetSettingsRequest,
                    ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* request,
                        ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* response) {
                        return this->RespondResetSettings(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondResetSettings(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondResetSettingsRequest,
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondResetSettingsRequest,
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondResetSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondResetSettings(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SubscribeSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeSettings()
        {
            ::grpc::Service::MarkMethodCallback(
                23,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeSettingsRequest,
                    ::mavsdk::rpc::camera_server::SettingsResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* request) {
                        return this->SubscribeSettings(context, request);
                    }));
        }
        ~WithCallbackMethod_SubscribeSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::mavsdk::rpc::camera_server::SettingsResponse>*
        SubscribeSettings(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_RespondSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondSettings()
        {
            ::grpc::Service::MarkMethodCallback(
                24,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondSettingsRequest,
                    ::mavsdk::rpc::camera_server::RespondSettingsResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondSettingsRequest* request,
                        ::mavsdk::rpc::camera_server::RespondSettingsResponse* response) {
                        return this->RespondSettings(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondSettings(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondSettingsRequest,
                ::mavsdk::rpc::camera_server::RespondSettingsResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondSettingsRequest,
                ::mavsdk::rpc::camera_server::RespondSettingsResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondSettings() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondSettings(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSettingsResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SubscribeSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeSystemTime()
        {
            ::grpc::Service::MarkMethodCallback(
                25,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest,
                    ::mavsdk::rpc::camera_server::SystemTimeResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* request) {
                        return this->SubscribeSystemTime(context, request);
                    }));
        }
        ~WithCallbackMethod_SubscribeSystemTime() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SystemTimeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::mavsdk::rpc::camera_server::SystemTimeResponse>*
        SubscribeSystemTime(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_RespondSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondSystemTime()
        {
            ::grpc::Service::MarkMethodCallback(
                26,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondSystemTimeRequest,
                    ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* request,
                        ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* response) {
                        return this->RespondSystemTime(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondSystemTime(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondSystemTimeRequest,
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondSystemTimeRequest,
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondSystemTime() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondSystemTime(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_SubscribeZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_SubscribeZoomRange()
        {
            ::grpc::Service::MarkMethodCallback(
                27,
                new ::grpc::internal::CallbackServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest,
                    ::mavsdk::rpc::camera_server::ZoomRangeResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* request) {
                        return this->SubscribeZoomRange(context, request);
                    }));
        }
        ~WithCallbackMethod_SubscribeZoomRange() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ZoomRangeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::mavsdk::rpc::camera_server::ZoomRangeResponse>*
        SubscribeZoomRange(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithCallbackMethod_RespondZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithCallbackMethod_RespondZoomRange()
        {
            ::grpc::Service::MarkMethodCallback(
                28,
                new ::grpc::internal::CallbackUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondZoomRangeRequest,
                    ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* request,
                        ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* response) {
                        return this->RespondZoomRange(context, request, response);
                    }));
        }
        void SetMessageAllocatorFor_RespondZoomRange(
            ::grpc::MessageAllocator<
                ::mavsdk::rpc::camera_server::RespondZoomRangeRequest,
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>* allocator)
        {
            ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
            static_cast<::grpc::internal::CallbackUnaryHandler<
                ::mavsdk::rpc::camera_server::RespondZoomRangeRequest,
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>*>(handler)
                ->SetMessageAllocator(allocator);
        }
        ~WithCallbackMethod_RespondZoomRange() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondZoomRange(
            ::grpc::CallbackServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* /*response*/)
        {
            return nullptr;
        }
    };
    typedef WithCallbackMethod_SetInformation<WithCallbackMethod_SetVideoStreamInfo<WithCallbackMethod_SetInProgress<
        WithCallbackMethod_SubscribeTakePhoto<WithCallbackMethod_RespondTakePhoto<WithCallbackMethod_SubscribeStartVideo<
            WithCallbackMethod_RespondStartVideo<WithCallbackMethod_SubscribeStopVideo<
                WithCallbackMethod_RespondStopVideo<WithCallbackMethod_SubscribeStartVideoStreaming<
                    WithCallbackMethod_RespondStartVideoStreaming<WithCallbackMethod_SubscribeStopVideoStreaming<
                        WithCallbackMethod_RespondStopVideoStreaming<WithCallbackMethod_SubscribeSetMode<
                            WithCallbackMethod_RespondSetMode<WithCallbackMethod_SubscribeStorageInformation<
                                WithCallbackMethod_RespondStorageInformation<WithCallbackMethod_SubscribeCaptureStatus<
                                    WithCallbackMethod_RespondCaptureStatus<WithCallbackMethod_SubscribeFormatStorage<
                                        WithCallbackMethod_RespondFormatStorage<WithCallbackMethod_SubscribeResetSettings<
                                            WithCallbackMethod_RespondResetSettings<
                                                WithCallbackMethod_SubscribeSettings<
                                                    WithCallbackMethod_RespondSettings<
                                                        WithCallbackMethod_SubscribeSystemTime<
                                                            WithCallbackMethod_RespondSystemTime<
                                                                WithCallbackMethod_SubscribeZoomRange<
                                                                    WithCallbackMethod_RespondZoomRange<
                                                                        Service>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        CallbackService;
    typedef CallbackService ExperimentalCallbackService;
    template<class BaseClass> class WithGenericMethod_SetInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SetInformation() { ::grpc::Service::MarkMethodGeneric(0); }
        ~WithGenericMethod_SetInformation() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SetVideoStreamInfo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SetVideoStreamInfo() { ::grpc::Service::MarkMethodGeneric(1); }
        ~WithGenericMethod_SetVideoStreamInfo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetVideoStreamInfo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SetInProgress : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SetInProgress() { ::grpc::Service::MarkMethodGeneric(2); }
        ~WithGenericMethod_SetInProgress() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetInProgress(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInProgressResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SubscribeTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeTakePhoto() { ::grpc::Service::MarkMethodGeneric(3); }
        ~WithGenericMethod_SubscribeTakePhoto() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::TakePhotoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondTakePhoto() { ::grpc::Service::MarkMethodGeneric(4); }
        ~WithGenericMethod_RespondTakePhoto() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SubscribeStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeStartVideo() { ::grpc::Service::MarkMethodGeneric(5); }
        ~WithGenericMethod_SubscribeStartVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StartVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondStartVideo() { ::grpc::Service::MarkMethodGeneric(6); }
        ~WithGenericMethod_RespondStartVideo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SubscribeStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeStopVideo() { ::grpc::Service::MarkMethodGeneric(7); }
        ~WithGenericMethod_SubscribeStopVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StopVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondStopVideo() { ::grpc::Service::MarkMethodGeneric(8); }
        ~WithGenericMethod_RespondStopVideo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass>
    class WithGenericMethod_SubscribeStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeStartVideoStreaming() { ::grpc::Service::MarkMethodGeneric(9); }
        ~WithGenericMethod_SubscribeStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass>
    class WithGenericMethod_RespondStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondStartVideoStreaming() { ::grpc::Service::MarkMethodGeneric(10); }
        ~WithGenericMethod_RespondStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass>
    class WithGenericMethod_SubscribeStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeStopVideoStreaming() { ::grpc::Service::MarkMethodGeneric(11); }
        ~WithGenericMethod_SubscribeStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondStopVideoStreaming() { ::grpc::Service::MarkMethodGeneric(12); }
        ~WithGenericMethod_RespondStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SubscribeSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeSetMode() { ::grpc::Service::MarkMethodGeneric(13); }
        ~WithGenericMethod_SubscribeSetMode() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SetModeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondSetMode() { ::grpc::Service::MarkMethodGeneric(14); }
        ~WithGenericMethod_RespondSetMode() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSetModeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass>
    class WithGenericMethod_SubscribeStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeStorageInformation() { ::grpc::Service::MarkMethodGeneric(15); }
        ~WithGenericMethod_SubscribeStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StorageInformationResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondStorageInformation() { ::grpc::Service::MarkMethodGeneric(16); }
        ~WithGenericMethod_RespondStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SubscribeCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeCaptureStatus() { ::grpc::Service::MarkMethodGeneric(17); }
        ~WithGenericMethod_SubscribeCaptureStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::CaptureStatusResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondCaptureStatus() { ::grpc::Service::MarkMethodGeneric(18); }
        ~WithGenericMethod_RespondCaptureStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SubscribeFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeFormatStorage() { ::grpc::Service::MarkMethodGeneric(19); }
        ~WithGenericMethod_SubscribeFormatStorage() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::FormatStorageResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondFormatStorage() { ::grpc::Service::MarkMethodGeneric(20); }
        ~WithGenericMethod_RespondFormatStorage() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SubscribeResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeResetSettings() { ::grpc::Service::MarkMethodGeneric(21); }
        ~WithGenericMethod_SubscribeResetSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ResetSettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondResetSettings() { ::grpc::Service::MarkMethodGeneric(22); }
        ~WithGenericMethod_RespondResetSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SubscribeSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeSettings() { ::grpc::Service::MarkMethodGeneric(23); }
        ~WithGenericMethod_SubscribeSettings() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondSettings() { ::grpc::Service::MarkMethodGeneric(24); }
        ~WithGenericMethod_RespondSettings() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SubscribeSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeSystemTime() { ::grpc::Service::MarkMethodGeneric(25); }
        ~WithGenericMethod_SubscribeSystemTime() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SystemTimeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondSystemTime() { ::grpc::Service::MarkMethodGeneric(26); }
        ~WithGenericMethod_RespondSystemTime() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_SubscribeZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_SubscribeZoomRange() { ::grpc::Service::MarkMethodGeneric(27); }
        ~WithGenericMethod_SubscribeZoomRange() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ZoomRangeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithGenericMethod_RespondZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithGenericMethod_RespondZoomRange() { ::grpc::Service::MarkMethodGeneric(28); }
        ~WithGenericMethod_RespondZoomRange() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
    };
    template<class BaseClass> class WithRawMethod_SetInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SetInformation() { ::grpc::Service::MarkMethodRaw(0); }
        ~WithRawMethod_SetInformation() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetInformation(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                0, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SetVideoStreamInfo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SetVideoStreamInfo() { ::grpc::Service::MarkMethodRaw(1); }
        ~WithRawMethod_SetVideoStreamInfo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetVideoStreamInfo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetVideoStreamInfo(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                1, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SetInProgress : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SetInProgress() { ::grpc::Service::MarkMethodRaw(2); }
        ~WithRawMethod_SetInProgress() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetInProgress(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInProgressResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSetInProgress(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                2, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeTakePhoto() { ::grpc::Service::MarkMethodRaw(3); }
        ~WithRawMethod_SubscribeTakePhoto() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::TakePhotoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeTakePhoto(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                3, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondTakePhoto() { ::grpc::Service::MarkMethodRaw(4); }
        ~WithRawMethod_RespondTakePhoto() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondTakePhoto(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                4, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeStartVideo() { ::grpc::Service::MarkMethodRaw(5); }
        ~WithRawMethod_SubscribeStartVideo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StartVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeStartVideo(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                5, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondStartVideo() { ::grpc::Service::MarkMethodRaw(6); }
        ~WithRawMethod_RespondStartVideo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondStartVideo(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                6, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeStopVideo() { ::grpc::Service::MarkMethodRaw(7); }
        ~WithRawMethod_SubscribeStopVideo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StopVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeStopVideo(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                7, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondStopVideo() { ::grpc::Service::MarkMethodRaw(8); }
        ~WithRawMethod_RespondStopVideo() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondStopVideo(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                8, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeStartVideoStreaming() { ::grpc::Service::MarkMethodRaw(9); }
        ~WithRawMethod_SubscribeStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeStartVideoStreaming(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                9, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondStartVideoStreaming() { ::grpc::Service::MarkMethodRaw(10); }
        ~WithRawMethod_RespondStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondStartVideoStreaming(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                10, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeStopVideoStreaming() { ::grpc::Service::MarkMethodRaw(11); }
        ~WithRawMethod_SubscribeStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeStopVideoStreaming(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                11, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondStopVideoStreaming() { ::grpc::Service::MarkMethodRaw(12); }
        ~WithRawMethod_RespondStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondStopVideoStreaming(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                12, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeSetMode() { ::grpc::Service::MarkMethodRaw(13); }
        ~WithRawMethod_SubscribeSetMode() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SetModeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeSetMode(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                13, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondSetMode() { ::grpc::Service::MarkMethodRaw(14); }
        ~WithRawMethod_RespondSetMode() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSetModeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondSetMode(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                14, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeStorageInformation() { ::grpc::Service::MarkMethodRaw(15); }
        ~WithRawMethod_SubscribeStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StorageInformationResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeStorageInformation(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                15, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondStorageInformation() { ::grpc::Service::MarkMethodRaw(16); }
        ~WithRawMethod_RespondStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondStorageInformation(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                16, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeCaptureStatus() { ::grpc::Service::MarkMethodRaw(17); }
        ~WithRawMethod_SubscribeCaptureStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::CaptureStatusResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeCaptureStatus(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                17, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondCaptureStatus() { ::grpc::Service::MarkMethodRaw(18); }
        ~WithRawMethod_RespondCaptureStatus() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondCaptureStatus(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                18, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeFormatStorage() { ::grpc::Service::MarkMethodRaw(19); }
        ~WithRawMethod_SubscribeFormatStorage() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::FormatStorageResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeFormatStorage(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                19, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondFormatStorage() { ::grpc::Service::MarkMethodRaw(20); }
        ~WithRawMethod_RespondFormatStorage() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondFormatStorage(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                20, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeResetSettings() { ::grpc::Service::MarkMethodRaw(21); }
        ~WithRawMethod_SubscribeResetSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ResetSettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeResetSettings(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                21, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondResetSettings() { ::grpc::Service::MarkMethodRaw(22); }
        ~WithRawMethod_RespondResetSettings() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondResetSettings(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                22, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeSettings() { ::grpc::Service::MarkMethodRaw(23); }
        ~WithRawMethod_SubscribeSettings() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeSettings(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                23, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondSettings() { ::grpc::Service::MarkMethodRaw(24); }
        ~WithRawMethod_RespondSettings() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondSettings(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                24, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeSystemTime() { ::grpc::Service::MarkMethodRaw(25); }
        ~WithRawMethod_SubscribeSystemTime() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SystemTimeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeSystemTime(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                25, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondSystemTime() { ::grpc::Service::MarkMethodRaw(26); }
        ~WithRawMethod_RespondSystemTime() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondSystemTime(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                26, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_SubscribeZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_SubscribeZoomRange() { ::grpc::Service::MarkMethodRaw(27); }
        ~WithRawMethod_SubscribeZoomRange() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SubscribeZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ZoomRangeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestSubscribeZoomRange(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncServerStreaming(
                27, context, request, writer, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawMethod_RespondZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawMethod_RespondZoomRange() { ::grpc::Service::MarkMethodRaw(28); }
        ~WithRawMethod_RespondZoomRange() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status RespondZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        void RequestRespondZoomRange(
            ::grpc::ServerContext* context,
            ::grpc::ByteBuffer* request,
            ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
            ::grpc::CompletionQueue* new_call_cq,
            ::grpc::ServerCompletionQueue* notification_cq,
            void* tag)
        {
            ::grpc::Service::RequestAsyncUnary(
                28, context, request, response, new_call_cq, notification_cq, tag);
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_SetInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SetInformation()
        {
            ::grpc::Service::MarkMethodRawCallback(
                0,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->SetInformation(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_SetInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* SetInformation(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_SetVideoStreamInfo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SetVideoStreamInfo()
        {
            ::grpc::Service::MarkMethodRawCallback(
                1,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->SetVideoStreamInfo(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_SetVideoStreamInfo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SetVideoStreamInfo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* SetVideoStreamInfo(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_SetInProgress : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SetInProgress()
        {
            ::grpc::Service::MarkMethodRawCallback(
                2,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->SetInProgress(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_SetInProgress() override { BaseClassMustBeDerivedFromService(this); }
        // disable synchronous version of this method
        ::grpc::Status SetInProgress(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInProgressResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* SetInProgress(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_SubscribeTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeTakePhoto()
        {
            ::grpc::Service::MarkMethodRawCallback(
                3,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeTakePhoto(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeTakePhoto() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::TakePhotoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeTakePhoto(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_RespondTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondTakePhoto()
        {
            ::grpc::Service::MarkMethodRawCallback(
                4,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondTakePhoto(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondTakePhoto() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondTakePhoto(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_SubscribeStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeStartVideo()
        {
            ::grpc::Service::MarkMethodRawCallback(
                5,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeStartVideo(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeStartVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StartVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeStartVideo(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_RespondStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondStartVideo()
        {
            ::grpc::Service::MarkMethodRawCallback(
                6,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondStartVideo(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondStartVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondStartVideo(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_SubscribeStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeStopVideo()
        {
            ::grpc::Service::MarkMethodRawCallback(
                7,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeStopVideo(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeStopVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StopVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeStopVideo(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_RespondStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondStopVideo()
        {
            ::grpc::Service::MarkMethodRawCallback(
                8,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondStopVideo(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondStopVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondStopVideo(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithRawCallbackMethod_SubscribeStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeStartVideoStreaming()
        {
            ::grpc::Service::MarkMethodRawCallback(
                9,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeStartVideoStreaming(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeStartVideoStreaming(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithRawCallbackMethod_RespondStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondStartVideoStreaming()
        {
            ::grpc::Service::MarkMethodRawCallback(
                10,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondStartVideoStreaming(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondStartVideoStreaming(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithRawCallbackMethod_SubscribeStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeStopVideoStreaming()
        {
            ::grpc::Service::MarkMethodRawCallback(
                11,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeStopVideoStreaming(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeStopVideoStreaming(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithRawCallbackMethod_RespondStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondStopVideoStreaming()
        {
            ::grpc::Service::MarkMethodRawCallback(
                12,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondStopVideoStreaming(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondStopVideoStreaming(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_SubscribeSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeSetMode()
        {
            ::grpc::Service::MarkMethodRawCallback(
                13,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeSetMode(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeSetMode() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SetModeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeSetMode(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_RespondSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondSetMode()
        {
            ::grpc::Service::MarkMethodRawCallback(
                14,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondSetMode(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondSetMode() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSetModeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondSetMode(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithRawCallbackMethod_SubscribeStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeStorageInformation()
        {
            ::grpc::Service::MarkMethodRawCallback(
                15,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeStorageInformation(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StorageInformationResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeStorageInformation(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithRawCallbackMethod_RespondStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondStorageInformation()
        {
            ::grpc::Service::MarkMethodRawCallback(
                16,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondStorageInformation(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondStorageInformation(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithRawCallbackMethod_SubscribeCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeCaptureStatus()
        {
            ::grpc::Service::MarkMethodRawCallback(
                17,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeCaptureStatus(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeCaptureStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::CaptureStatusResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeCaptureStatus(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_RespondCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondCaptureStatus()
        {
            ::grpc::Service::MarkMethodRawCallback(
                18,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondCaptureStatus(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondCaptureStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondCaptureStatus(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithRawCallbackMethod_SubscribeFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeFormatStorage()
        {
            ::grpc::Service::MarkMethodRawCallback(
                19,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeFormatStorage(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeFormatStorage() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::FormatStorageResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeFormatStorage(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_RespondFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondFormatStorage()
        {
            ::grpc::Service::MarkMethodRawCallback(
                20,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondFormatStorage(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondFormatStorage() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondFormatStorage(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass>
    class WithRawCallbackMethod_SubscribeResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeResetSettings()
        {
            ::grpc::Service::MarkMethodRawCallback(
                21,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeResetSettings(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeResetSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ResetSettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeResetSettings(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_RespondResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondResetSettings()
        {
            ::grpc::Service::MarkMethodRawCallback(
                22,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondResetSettings(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondResetSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondResetSettings(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_SubscribeSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeSettings()
        {
            ::grpc::Service::MarkMethodRawCallback(
                23,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeSettings(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeSettings(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_RespondSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondSettings()
        {
            ::grpc::Service::MarkMethodRawCallback(
                24,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondSettings(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondSettings(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_SubscribeSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeSystemTime()
        {
            ::grpc::Service::MarkMethodRawCallback(
                25,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeSystemTime(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeSystemTime() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SystemTimeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeSystemTime(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_RespondSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondSystemTime()
        {
            ::grpc::Service::MarkMethodRawCallback(
                26,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondSystemTime(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondSystemTime() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondSystemTime(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_SubscribeZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_SubscribeZoomRange()
        {
            ::grpc::Service::MarkMethodRawCallback(
                27,
                new ::grpc::internal::
                    CallbackServerStreamingHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                        [this](
                            ::grpc::CallbackServerContext* context,
                            const ::grpc::ByteBuffer* request) {
                            return this->SubscribeZoomRange(context, request);
                        }));
        }
        ~WithRawCallbackMethod_SubscribeZoomRange() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status SubscribeZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ZoomRangeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerWriteReactor<::grpc::ByteBuffer>* SubscribeZoomRange(
            ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithRawCallbackMethod_RespondZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithRawCallbackMethod_RespondZoomRange()
        {
            ::grpc::Service::MarkMethodRawCallback(
                28,
                new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                    [this](
                        ::grpc::CallbackServerContext* context,
                        const ::grpc::ByteBuffer* request,
                        ::grpc::ByteBuffer* response) {
                        return this->RespondZoomRange(context, request, response);
                    }));
        }
        ~WithRawCallbackMethod_RespondZoomRange() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable synchronous version of this method
        ::grpc::Status RespondZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        virtual ::grpc::ServerUnaryReactor* RespondZoomRange(
            ::grpc::CallbackServerContext* /*context*/,
            const ::grpc::ByteBuffer* /*request*/,
            ::grpc::ByteBuffer* /*response*/)
        {
            return nullptr;
        }
    };
    template<class BaseClass> class WithStreamedUnaryMethod_SetInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_SetInformation()
        {
            ::grpc::Service::MarkMethodStreamed(
                0,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::SetInformationRequest,
                    ::mavsdk::rpc::camera_server::SetInformationResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::SetInformationRequest,
                            ::mavsdk::rpc::camera_server::SetInformationResponse>* streamer) {
                        return this->StreamedSetInformation(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_SetInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SetInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedSetInformation(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::SetInformationRequest,
                ::mavsdk::rpc::camera_server::SetInformationResponse>* server_unary_streamer) = 0;
    };
    template<class BaseClass> class WithStreamedUnaryMethod_SetVideoStreamInfo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_SetVideoStreamInfo()
        {
            ::grpc::Service::MarkMethodStreamed(
                1,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest,
                    ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest,
                            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>* streamer) {
                        return this->StreamedSetVideoStreamInfo(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_SetVideoStreamInfo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SetVideoStreamInfo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedSetVideoStreamInfo(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoRequest,
                ::mavsdk::rpc::camera_server::SetVideoStreamInfoResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass> class WithStreamedUnaryMethod_SetInProgress : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_SetInProgress()
        {
            ::grpc::Service::MarkMethodStreamed(
                2,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::SetInProgressRequest,
                    ::mavsdk::rpc::camera_server::SetInProgressResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::SetInProgressRequest,
                            ::mavsdk::rpc::camera_server::SetInProgressResponse>* streamer) {
                        return this->StreamedSetInProgress(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_SetInProgress() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SetInProgress(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SetInProgressRequest* /*request*/,
            ::mavsdk::rpc::camera_server::SetInProgressResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedSetInProgress(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::SetInProgressRequest,
                ::mavsdk::rpc::camera_server::SetInProgressResponse>* server_unary_streamer) = 0;
    };
    template<class BaseClass> class WithStreamedUnaryMethod_RespondTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondTakePhoto()
        {
            ::grpc::Service::MarkMethodStreamed(
                4,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondTakePhotoRequest,
                    ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondTakePhotoRequest,
                            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>* streamer) {
                        return this->StreamedRespondTakePhoto(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondTakePhoto() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondTakePhotoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondTakePhotoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondTakePhoto(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondTakePhotoRequest,
                ::mavsdk::rpc::camera_server::RespondTakePhotoResponse>* server_unary_streamer) = 0;
    };
    template<class BaseClass> class WithStreamedUnaryMethod_RespondStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondStartVideo()
        {
            ::grpc::Service::MarkMethodStreamed(
                6,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondStartVideoRequest,
                    ::mavsdk::rpc::camera_server::RespondStartVideoResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondStartVideoRequest,
                            ::mavsdk::rpc::camera_server::RespondStartVideoResponse>* streamer) {
                        return this->StreamedRespondStartVideo(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondStartVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondStartVideo(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondStartVideoRequest,
                ::mavsdk::rpc::camera_server::RespondStartVideoResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass> class WithStreamedUnaryMethod_RespondStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondStopVideo()
        {
            ::grpc::Service::MarkMethodStreamed(
                8,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondStopVideoRequest,
                    ::mavsdk::rpc::camera_server::RespondStopVideoResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondStopVideoRequest,
                            ::mavsdk::rpc::camera_server::RespondStopVideoResponse>* streamer) {
                        return this->StreamedRespondStopVideo(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondStopVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondStopVideo(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondStopVideoRequest,
                ::mavsdk::rpc::camera_server::RespondStopVideoResponse>* server_unary_streamer) = 0;
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_RespondStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondStartVideoStreaming()
        {
            ::grpc::Service::MarkMethodStreamed(
                10,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest,
                    ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest,
                            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>*
                            streamer) {
                        return this->StreamedRespondStartVideoStreaming(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondStartVideoStreaming(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingRequest,
                ::mavsdk::rpc::camera_server::RespondStartVideoStreamingResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_RespondStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondStopVideoStreaming()
        {
            ::grpc::Service::MarkMethodStreamed(
                12,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest,
                    ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest,
                            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>*
                            streamer) {
                        return this->StreamedRespondStopVideoStreaming(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondStopVideoStreaming(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingRequest,
                ::mavsdk::rpc::camera_server::RespondStopVideoStreamingResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass> class WithStreamedUnaryMethod_RespondSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondSetMode()
        {
            ::grpc::Service::MarkMethodStreamed(
                14,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondSetModeRequest,
                    ::mavsdk::rpc::camera_server::RespondSetModeResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondSetModeRequest,
                            ::mavsdk::rpc::camera_server::RespondSetModeResponse>* streamer) {
                        return this->StreamedRespondSetMode(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondSetMode() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSetModeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSetModeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondSetMode(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondSetModeRequest,
                ::mavsdk::rpc::camera_server::RespondSetModeResponse>* server_unary_streamer) = 0;
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_RespondStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondStorageInformation()
        {
            ::grpc::Service::MarkMethodStreamed(
                16,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondStorageInformationRequest,
                    ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondStorageInformationRequest,
                            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>*
                            streamer) {
                        return this->StreamedRespondStorageInformation(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondStorageInformationRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondStorageInformationResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondStorageInformation(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondStorageInformationRequest,
                ::mavsdk::rpc::camera_server::RespondStorageInformationResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_RespondCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondCaptureStatus()
        {
            ::grpc::Service::MarkMethodStreamed(
                18,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest,
                    ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest,
                            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>* streamer) {
                        return this->StreamedRespondCaptureStatus(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondCaptureStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondCaptureStatus(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondCaptureStatusRequest,
                ::mavsdk::rpc::camera_server::RespondCaptureStatusResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_RespondFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondFormatStorage()
        {
            ::grpc::Service::MarkMethodStreamed(
                20,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondFormatStorageRequest,
                    ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondFormatStorageRequest,
                            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>* streamer) {
                        return this->StreamedRespondFormatStorage(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondFormatStorage() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondFormatStorageRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondFormatStorageResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondFormatStorage(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondFormatStorageRequest,
                ::mavsdk::rpc::camera_server::RespondFormatStorageResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass>
    class WithStreamedUnaryMethod_RespondResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondResetSettings()
        {
            ::grpc::Service::MarkMethodStreamed(
                22,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondResetSettingsRequest,
                    ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondResetSettingsRequest,
                            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>* streamer) {
                        return this->StreamedRespondResetSettings(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondResetSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondResetSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondResetSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondResetSettings(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondResetSettingsRequest,
                ::mavsdk::rpc::camera_server::RespondResetSettingsResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass> class WithStreamedUnaryMethod_RespondSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondSettings()
        {
            ::grpc::Service::MarkMethodStreamed(
                24,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondSettingsRequest,
                    ::mavsdk::rpc::camera_server::RespondSettingsResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondSettingsRequest,
                            ::mavsdk::rpc::camera_server::RespondSettingsResponse>* streamer) {
                        return this->StreamedRespondSettings(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSettingsRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSettingsResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondSettings(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondSettingsRequest,
                ::mavsdk::rpc::camera_server::RespondSettingsResponse>* server_unary_streamer) = 0;
    };
    template<class BaseClass> class WithStreamedUnaryMethod_RespondSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondSystemTime()
        {
            ::grpc::Service::MarkMethodStreamed(
                26,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondSystemTimeRequest,
                    ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondSystemTimeRequest,
                            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>* streamer) {
                        return this->StreamedRespondSystemTime(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondSystemTime() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondSystemTimeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondSystemTimeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondSystemTime(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondSystemTimeRequest,
                ::mavsdk::rpc::camera_server::RespondSystemTimeResponse>*
                server_unary_streamer) = 0;
    };
    template<class BaseClass> class WithStreamedUnaryMethod_RespondZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithStreamedUnaryMethod_RespondZoomRange()
        {
            ::grpc::Service::MarkMethodStreamed(
                28,
                new ::grpc::internal::StreamedUnaryHandler<
                    ::mavsdk::rpc::camera_server::RespondZoomRangeRequest,
                    ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerUnaryStreamer<
                            ::mavsdk::rpc::camera_server::RespondZoomRangeRequest,
                            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>* streamer) {
                        return this->StreamedRespondZoomRange(context, streamer);
                    }));
        }
        ~WithStreamedUnaryMethod_RespondZoomRange() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status RespondZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::RespondZoomRangeRequest* /*request*/,
            ::mavsdk::rpc::camera_server::RespondZoomRangeResponse* /*response*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with streamed unary
        virtual ::grpc::Status StreamedRespondZoomRange(
            ::grpc::ServerContext* context,
            ::grpc::ServerUnaryStreamer<
                ::mavsdk::rpc::camera_server::RespondZoomRangeRequest,
                ::mavsdk::rpc::camera_server::RespondZoomRangeResponse>* server_unary_streamer) = 0;
    };
    typedef WithStreamedUnaryMethod_SetInformation<WithStreamedUnaryMethod_SetVideoStreamInfo<
        WithStreamedUnaryMethod_SetInProgress<WithStreamedUnaryMethod_RespondTakePhoto<
            WithStreamedUnaryMethod_RespondStartVideo<WithStreamedUnaryMethod_RespondStopVideo<
                WithStreamedUnaryMethod_RespondStartVideoStreaming<
                    WithStreamedUnaryMethod_RespondStopVideoStreaming<
                        WithStreamedUnaryMethod_RespondSetMode<
                            WithStreamedUnaryMethod_RespondStorageInformation<
                                WithStreamedUnaryMethod_RespondCaptureStatus<
                                    WithStreamedUnaryMethod_RespondFormatStorage<
                                        WithStreamedUnaryMethod_RespondResetSettings<
                                            WithStreamedUnaryMethod_RespondSettings<
                                                WithStreamedUnaryMethod_RespondSystemTime<
                                                    WithStreamedUnaryMethod_RespondZoomRange<
                                                        Service>>>>>>>>>>>>>>>>
        StreamedUnaryService;
    template<class BaseClass> class WithSplitStreamingMethod_SubscribeTakePhoto : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeTakePhoto()
        {
            ::grpc::Service::MarkMethodStreamed(
                3,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest,
                    ::mavsdk::rpc::camera_server::TakePhotoResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest,
                            ::mavsdk::rpc::camera_server::TakePhotoResponse>* streamer) {
                        return this->StreamedSubscribeTakePhoto(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeTakePhoto() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeTakePhoto(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::TakePhotoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeTakePhoto(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeTakePhotoRequest,
                ::mavsdk::rpc::camera_server::TakePhotoResponse>* server_split_streamer) = 0;
    };
    template<class BaseClass>
    class WithSplitStreamingMethod_SubscribeStartVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeStartVideo()
        {
            ::grpc::Service::MarkMethodStreamed(
                5,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest,
                    ::mavsdk::rpc::camera_server::StartVideoResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest,
                            ::mavsdk::rpc::camera_server::StartVideoResponse>* streamer) {
                        return this->StreamedSubscribeStartVideo(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeStartVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeStartVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StartVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeStartVideo(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeStartVideoRequest,
                ::mavsdk::rpc::camera_server::StartVideoResponse>* server_split_streamer) = 0;
    };
    template<class BaseClass> class WithSplitStreamingMethod_SubscribeStopVideo : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeStopVideo()
        {
            ::grpc::Service::MarkMethodStreamed(
                7,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest,
                    ::mavsdk::rpc::camera_server::StopVideoResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest,
                            ::mavsdk::rpc::camera_server::StopVideoResponse>* streamer) {
                        return this->StreamedSubscribeStopVideo(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeStopVideo() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeStopVideo(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::StopVideoResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeStopVideo(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeStopVideoRequest,
                ::mavsdk::rpc::camera_server::StopVideoResponse>* server_split_streamer) = 0;
    };
    template<class BaseClass>
    class WithSplitStreamingMethod_SubscribeStartVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeStartVideoStreaming()
        {
            ::grpc::Service::MarkMethodStreamed(
                9,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest,
                    ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest,
                            ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>* streamer) {
                        return this->StreamedSubscribeStartVideoStreaming(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeStartVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeStartVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeStartVideoStreaming(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeStartVideoStreamingRequest,
                ::mavsdk::rpc::camera_server::StartVideoStreamingResponse>*
                server_split_streamer) = 0;
    };
    template<class BaseClass>
    class WithSplitStreamingMethod_SubscribeStopVideoStreaming : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeStopVideoStreaming()
        {
            ::grpc::Service::MarkMethodStreamed(
                11,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest,
                    ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest,
                            ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>* streamer) {
                        return this->StreamedSubscribeStopVideoStreaming(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeStopVideoStreaming() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeStopVideoStreaming(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeStopVideoStreaming(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeStopVideoStreamingRequest,
                ::mavsdk::rpc::camera_server::StopVideoStreamingResponse>*
                server_split_streamer) = 0;
    };
    template<class BaseClass> class WithSplitStreamingMethod_SubscribeSetMode : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeSetMode()
        {
            ::grpc::Service::MarkMethodStreamed(
                13,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeSetModeRequest,
                    ::mavsdk::rpc::camera_server::SetModeResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeSetModeRequest,
                            ::mavsdk::rpc::camera_server::SetModeResponse>* streamer) {
                        return this->StreamedSubscribeSetMode(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeSetMode() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeSetMode(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSetModeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SetModeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeSetMode(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeSetModeRequest,
                ::mavsdk::rpc::camera_server::SetModeResponse>* server_split_streamer) = 0;
    };
    template<class BaseClass>
    class WithSplitStreamingMethod_SubscribeStorageInformation : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeStorageInformation()
        {
            ::grpc::Service::MarkMethodStreamed(
                15,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest,
                    ::mavsdk::rpc::camera_server::StorageInformationResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest,
                            ::mavsdk::rpc::camera_server::StorageInformationResponse>* streamer) {
                        return this->StreamedSubscribeStorageInformation(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeStorageInformation() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeStorageInformation(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest* /*request*/,
            ::grpc::ServerWriter<
                ::mavsdk::rpc::camera_server::StorageInformationResponse>* /*writer*/) override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeStorageInformation(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeStorageInformationRequest,
                ::mavsdk::rpc::camera_server::StorageInformationResponse>*
                server_split_streamer) = 0;
    };
    template<class BaseClass>
    class WithSplitStreamingMethod_SubscribeCaptureStatus : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeCaptureStatus()
        {
            ::grpc::Service::MarkMethodStreamed(
                17,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest,
                    ::mavsdk::rpc::camera_server::CaptureStatusResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest,
                            ::mavsdk::rpc::camera_server::CaptureStatusResponse>* streamer) {
                        return this->StreamedSubscribeCaptureStatus(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeCaptureStatus() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeCaptureStatus(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::CaptureStatusResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeCaptureStatus(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeCaptureStatusRequest,
                ::mavsdk::rpc::camera_server::CaptureStatusResponse>* server_split_streamer) = 0;
    };
    template<class BaseClass>
    class WithSplitStreamingMethod_SubscribeFormatStorage : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeFormatStorage()
        {
            ::grpc::Service::MarkMethodStreamed(
                19,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest,
                    ::mavsdk::rpc::camera_server::FormatStorageResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest,
                            ::mavsdk::rpc::camera_server::FormatStorageResponse>* streamer) {
                        return this->StreamedSubscribeFormatStorage(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeFormatStorage() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeFormatStorage(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::FormatStorageResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeFormatStorage(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeFormatStorageRequest,
                ::mavsdk::rpc::camera_server::FormatStorageResponse>* server_split_streamer) = 0;
    };
    template<class BaseClass>
    class WithSplitStreamingMethod_SubscribeResetSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeResetSettings()
        {
            ::grpc::Service::MarkMethodStreamed(
                21,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest,
                    ::mavsdk::rpc::camera_server::ResetSettingsResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest,
                            ::mavsdk::rpc::camera_server::ResetSettingsResponse>* streamer) {
                        return this->StreamedSubscribeResetSettings(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeResetSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeResetSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ResetSettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeResetSettings(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeResetSettingsRequest,
                ::mavsdk::rpc::camera_server::ResetSettingsResponse>* server_split_streamer) = 0;
    };
    template<class BaseClass> class WithSplitStreamingMethod_SubscribeSettings : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeSettings()
        {
            ::grpc::Service::MarkMethodStreamed(
                23,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeSettingsRequest,
                    ::mavsdk::rpc::camera_server::SettingsResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeSettingsRequest,
                            ::mavsdk::rpc::camera_server::SettingsResponse>* streamer) {
                        return this->StreamedSubscribeSettings(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeSettings() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeSettings(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSettingsRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SettingsResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeSettings(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeSettingsRequest,
                ::mavsdk::rpc::camera_server::SettingsResponse>* server_split_streamer) = 0;
    };
    template<class BaseClass>
    class WithSplitStreamingMethod_SubscribeSystemTime : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeSystemTime()
        {
            ::grpc::Service::MarkMethodStreamed(
                25,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest,
                    ::mavsdk::rpc::camera_server::SystemTimeResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest,
                            ::mavsdk::rpc::camera_server::SystemTimeResponse>* streamer) {
                        return this->StreamedSubscribeSystemTime(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeSystemTime() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeSystemTime(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::SystemTimeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeSystemTime(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeSystemTimeRequest,
                ::mavsdk::rpc::camera_server::SystemTimeResponse>* server_split_streamer) = 0;
    };
    template<class BaseClass> class WithSplitStreamingMethod_SubscribeZoomRange : public BaseClass {
    private:
        void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

    public:
        WithSplitStreamingMethod_SubscribeZoomRange()
        {
            ::grpc::Service::MarkMethodStreamed(
                27,
                new ::grpc::internal::SplitServerStreamingHandler<
                    ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest,
                    ::mavsdk::rpc::camera_server::ZoomRangeResponse>(
                    [this](
                        ::grpc::ServerContext* context,
                        ::grpc::ServerSplitStreamer<
                            ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest,
                            ::mavsdk::rpc::camera_server::ZoomRangeResponse>* streamer) {
                        return this->StreamedSubscribeZoomRange(context, streamer);
                    }));
        }
        ~WithSplitStreamingMethod_SubscribeZoomRange() override
        {
            BaseClassMustBeDerivedFromService(this);
        }
        // disable regular version of this method
        ::grpc::Status SubscribeZoomRange(
            ::grpc::ServerContext* /*context*/,
            const ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest* /*request*/,
            ::grpc::ServerWriter<::mavsdk::rpc::camera_server::ZoomRangeResponse>* /*writer*/)
            override
        {
            abort();
            return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
        }
        // replace default version of method with split streamed
        virtual ::grpc::Status StreamedSubscribeZoomRange(
            ::grpc::ServerContext* context,
            ::grpc::ServerSplitStreamer<
                ::mavsdk::rpc::camera_server::SubscribeZoomRangeRequest,
                ::mavsdk::rpc::camera_server::ZoomRangeResponse>* server_split_streamer) = 0;
    };
    typedef WithSplitStreamingMethod_SubscribeTakePhoto<
        WithSplitStreamingMethod_SubscribeStartVideo<WithSplitStreamingMethod_SubscribeStopVideo<
            WithSplitStreamingMethod_SubscribeStartVideoStreaming<
                WithSplitStreamingMethod_SubscribeStopVideoStreaming<
                    WithSplitStreamingMethod_SubscribeSetMode<
                        WithSplitStreamingMethod_SubscribeStorageInformation<
                            WithSplitStreamingMethod_SubscribeCaptureStatus<
                                WithSplitStreamingMethod_SubscribeFormatStorage<
                                    WithSplitStreamingMethod_SubscribeResetSettings<
                                        WithSplitStreamingMethod_SubscribeSettings<
                                            WithSplitStreamingMethod_SubscribeSystemTime<
                                                WithSplitStreamingMethod_SubscribeZoomRange<
                                                    Service>>>>>>>>>>>>>
        SplitStreamedService;
    typedef WithStreamedUnaryMethod_SetInformation<WithStreamedUnaryMethod_SetVideoStreamInfo<
        WithStreamedUnaryMethod_SetInProgress<WithSplitStreamingMethod_SubscribeTakePhoto<WithStreamedUnaryMethod_RespondTakePhoto<
            WithSplitStreamingMethod_SubscribeStartVideo<WithStreamedUnaryMethod_RespondStartVideo<
                WithSplitStreamingMethod_SubscribeStopVideo<WithStreamedUnaryMethod_RespondStopVideo<
                    WithSplitStreamingMethod_SubscribeStartVideoStreaming<WithStreamedUnaryMethod_RespondStartVideoStreaming<
                        WithSplitStreamingMethod_SubscribeStopVideoStreaming<WithStreamedUnaryMethod_RespondStopVideoStreaming<
                            WithSplitStreamingMethod_SubscribeSetMode<WithStreamedUnaryMethod_RespondSetMode<
                                WithSplitStreamingMethod_SubscribeStorageInformation<WithStreamedUnaryMethod_RespondStorageInformation<
                                    WithSplitStreamingMethod_SubscribeCaptureStatus<WithStreamedUnaryMethod_RespondCaptureStatus<
                                        WithSplitStreamingMethod_SubscribeFormatStorage<WithStreamedUnaryMethod_RespondFormatStorage<
                                            WithSplitStreamingMethod_SubscribeResetSettings<
                                                WithStreamedUnaryMethod_RespondResetSettings<
                                                    WithSplitStreamingMethod_SubscribeSettings<WithStreamedUnaryMethod_RespondSettings<
                                                        WithSplitStreamingMethod_SubscribeSystemTime<
                                                            WithStreamedUnaryMethod_RespondSystemTime<
                                                                WithSplitStreamingMethod_SubscribeZoomRange<
                                                                    WithStreamedUnaryMethod_RespondZoomRange<
                                                                        Service>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        StreamedService;
};

} // namespace camera_server
} // namespace rpc
} // namespace mavsdk

#endif // GRPC_camera_5fserver_2fcamera_5fserver_2eproto__INCLUDED
